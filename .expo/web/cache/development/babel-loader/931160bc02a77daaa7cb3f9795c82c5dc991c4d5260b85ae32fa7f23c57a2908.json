{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThreadsScreen = function ThreadsScreen() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    postedBy = _useState2[0],\n    setpostedBy = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    content = _useState4[0],\n    setContent = _useState4[1];\n  useEffect(function () {\n    var fetchUserId = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var storedUserId = yield AsyncStorage.getItem(\"userId\");\n          setUserId(storedUserId);\n        } catch (error) {\n          console.error(\"Error fetching userId from AsyncStorage:\", error);\n        }\n      });\n      return function fetchUserId() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchUserId();\n  }, []);\n  var handlePostSubmit = function handlePostSubmit() {\n    console.log(\"userId:\", userId);\n    if (!userId || !content) {\n      console.log(\"Postedby and text fields are required\");\n      return;\n    }\n    var postData = {\n      postedBy: postedBy,\n      content: content\n    };\n    AsyncStorage.getItem(\"authToken\").then(function (token) {\n      if (token) {\n        axios.post(\"http://localhost:3000/posts/create-post\", postData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }).then(function (response) {\n          setContent(\"\");\n        }).catch(function (error) {\n          console.log(\"error creating post\", error);\n        });\n      } else {\n        console.log(\"No token found in AsyncStorage\");\n      }\n    });\n  };\n  return _jsxs(SafeAreaView, {\n    style: {\n      padding: 10\n    },\n    children: [_jsxs(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        gap: 10,\n        padding: 10\n      },\n      children: [_jsx(Image, {\n        style: {\n          width: 40,\n          height: 40,\n          borderRadius: 20,\n          resizeMode: \"contain\"\n        },\n        source: {\n          uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\"\n        }\n      }), _jsx(Text, {\n        children: \"Sujan_Music\"\n      })]\n    }), _jsx(View, {\n      style: {\n        flexDirection: \"row\",\n        marginLeft: 10\n      },\n      children: _jsx(TextInput, {\n        value: content,\n        onChangeText: function onChangeText(text) {\n          return setContent(text);\n        },\n        placeholderTextColor: \"black\",\n        placeholder: \"Type your message...\",\n        multiline: true\n      })\n    }), _jsx(View, {\n      style: {\n        marginTop: 20\n      }\n    }), _jsx(Button, {\n      onPress: handlePostSubmit,\n      title: \"Share Post\"\n    })]\n  });\n};\nexport default ThreadsScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useState","useEffect","axios","AsyncStorage","jsx","_jsx","jsxs","_jsxs","ThreadsScreen","_useState","_useState2","_slicedToArray","postedBy","setpostedBy","_useState3","_useState4","content","setContent","fetchUserId","_ref","_asyncToGenerator","storedUserId","getItem","setUserId","error","console","apply","arguments","handlePostSubmit","log","userId","postData","then","token","post","headers","Authorization","response","catch","SafeAreaView","style","padding","children","View","flexDirection","alignItems","gap","Image","width","height","borderRadius","resizeMode","source","uri","Text","marginLeft","TextInput","value","onChangeText","text","placeholderTextColor","placeholder","multiline","marginTop","Button","onPress","title","styles","StyleSheet","create"],"sources":["C:/himanshu/threads-app/screens/ThreadsScreen.js"],"sourcesContent":["import {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Image,\r\n  SafeAreaView,\r\n  TextInput,\r\n  Button,\r\n} from \"react-native\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nconst ThreadsScreen = () => {\r\n  const [postedBy, setpostedBy] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchUserId = async () => {\r\n      try {\r\n        const storedUserId = await AsyncStorage.getItem(\"userId\");\r\n        setUserId(storedUserId);\r\n      } catch (error) {\r\n        console.error(\"Error fetching userId from AsyncStorage:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUserId();\r\n  }, []);\r\n\r\n  const handlePostSubmit = () => {\r\n    console.log(\"userId:\", userId); // Log userId before making the API call\r\n    if (!userId || !content) {\r\n      console.log(\"Postedby and text fields are required\");\r\n      return;\r\n    }\r\n  \r\n    const postData = {\r\n      postedBy,\r\n      content,\r\n    };\r\n\r\n    // Retrieve the token from AsyncStorage\r\n    AsyncStorage.getItem(\"authToken\").then((token) => {\r\n      if (token) {\r\n        // Include the token in the request header\r\n        axios.post(\"http://localhost:3000/posts/create-post\", postData, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        })\r\n          .then((response) => {\r\n            setContent(\"\");\r\n          })\r\n          .catch((error) => {\r\n            console.log(\"error creating post\", error);\r\n          });\r\n      } else {\r\n        console.log(\"No token found in AsyncStorage\");\r\n      }\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <SafeAreaView style={{ padding: 10 }}>\r\n      <View\r\n        style={{\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          gap: 10,\r\n          padding: 10,\r\n        }}\r\n      >\r\n        <Image\r\n          style={{\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 20,\r\n            resizeMode: \"contain\",\r\n          }}\r\n          source={{\r\n            uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\",\r\n          }}\r\n        />\r\n\r\n        <Text>Sujan_Music</Text>\r\n      </View>\r\n\r\n      <View style={{ flexDirection: \"row\", marginLeft: 10 }}>\r\n        <TextInput\r\n          value={content}\r\n          onChangeText={(text) => setContent(text)}\r\n          placeholderTextColor={\"black\"}\r\n          placeholder=\"Type your message...\"\r\n          multiline\r\n        />\r\n      </View>\r\n\r\n      <View style={{ marginTop: 20 }} />\r\n\r\n      <Button onPress={handlePostSubmit} title=\"Share Post\" />\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default ThreadsScreen;\r\n\r\nconst styles = StyleSheet.create({});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}