{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/VT/Documents/Confidentials/Native Projects/levelArtFrontend/components/messageContainer.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { View, Text, Image, ScrollView } from 'react-native';\r\n// import { Avatar, Divider, useColorModeValue } from 'react-native-elements'; // Import Avatar and Divider from react-native-elements\r\n// import Message from './message';\r\n// import MessageInput from './messageInput';\r\n// import { useRecoilValue, useSetRecoilState } from 'recoil';\r\n// // import { selectedConversationAtom } from '../atoms/messagesAtom';\r\n// // import userAtom from '../atoms/usersAtom';\r\n// // import { useSocket } from '../context/socket';\r\n\r\n// const MessageContainer = () => {\r\n//   const selectedConversation = useRecoilValue(selectedConversationAtom);\r\n//   const [loadingMessages, setLoadingMessages] = useState(true);\r\n//   const [messages, setMessages] = useState([]); // Adjust the type of messages as needed\r\n//   const currentUser = useRecoilValue(userAtom)[0];\r\n//   const { socket } = useSocket();\r\n//   const setConversations = useSetRecoilState(conversationsAtom);\r\n//   const messageEndRef = useRef(null); // Adjust the ref type as needed\r\n\r\n//   useEffect(() => {\r\n//     socket.on('newMessage', (message) => {\r\n//       if (selectedConversation._id === message.conversationId) {\r\n//         setMessages((prev) => [...prev, message]);\r\n//       }\r\n\r\n//       if (!document.hasFocus()) {\r\n//         const sound = new Audio(messageSound);\r\n//         sound.play();\r\n//       }\r\n\r\n//       setConversations((prev) => {\r\n//         const updatedConversations = prev.map((conversation) => {\r\n//           if (conversation._id === message.conversationId) {\r\n//             return {\r\n//               ...conversation,\r\n//               lastMessage: {\r\n//                 text: message.text,\r\n//                 sender: message.sender,\r\n//               },\r\n//             };\r\n//           }\r\n//           return conversation;\r\n//         });\r\n//         return updatedConversations;\r\n//       });\r\n//     });\r\n\r\n//     return () => socket.off('newMessage');\r\n//   }, [socket, selectedConversation, setConversations]);\r\n\r\n//   useEffect(() => {\r\n//     const lastMessageIsFromOtherUser = messages.length && messages[messages.length - 1].sender !== currentUser._id;\r\n//     if (lastMessageIsFromOtherUser) {\r\n//       socket.emit('markMessagesAsSeen', {\r\n//         conversationId: selectedConversation._id,\r\n//         userId: selectedConversation.userId,\r\n//       });\r\n//     }\r\n\r\n//     socket.on('messagesSeen', ({ conversationId }) => {\r\n//       if (selectedConversation._id === conversationId) {\r\n//         setMessages((prev) => {\r\n//           const updatedMessages = prev.map((message) => {\r\n//             if (!message.seen) {\r\n//               return {\r\n//                 ...message,\r\n//                 seen: true,\r\n//               };\r\n//             }\r\n//             return message;\r\n//           });\r\n//           return updatedMessages;\r\n//         });\r\n//       }\r\n//     });\r\n//   }, [socket, currentUser._id, messages, selectedConversation]);\r\n\r\n//   useEffect(() => {\r\n//     const getMessages = async () => {\r\n//       setLoadingMessages(true);\r\n//       setMessages([]);\r\n//       try {\r\n//         if (selectedConversation.mock) return;\r\n//         const res = await fetch(`/api/messages/${selectedConversation.userId}`);\r\n//         const data = await res.json();\r\n//         if (data.error) {\r\n//           showToast('Error', data.error);\r\n//           return;\r\n//         }\r\n//         setMessages(data);\r\n//       } catch (error) {\r\n//         showToast('Error', error.message);\r\n//       } finally {\r\n//         setLoadingMessages(false);\r\n//       }\r\n//     };\r\n\r\n//     getMessages();\r\n//   }, [selectedConversation.userId, selectedConversation.mock]);\r\n\r\n//   const bgColor = useColorModeValue('gray.200', 'gray.dark');\r\n\r\n//   return (\r\n//     <View style={{ flex: 1, backgroundColor: bgColor, borderRadius: 8, padding: 8 }}>\r\n//       {/* Message header */}\r\n//       <View style={{ flexDirection: 'row', alignItems: 'center', paddingVertical: 8 }}>\r\n//         <Avatar source={{ uri: selectedConversation.userProfilePic }} size=\"small\" />\r\n//         <Text>\r\n//           {selectedConversation.username} <Image source={require('../assets/logo.png')} style={{ width: 4, height: 4 }} />\r\n//         </Text>\r\n//       </View>\r\n\r\n//       <Divider />\r\n\r\n//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\r\n//         {loadingMessages ? (\r\n//           <View>\r\n//             {[...Array(5)].map((_, i) => (\r\n//               <View key={i} style={{ flexDirection: i % 2 === 0 ? 'row' : 'row-reverse', alignItems: 'center', padding: 4 }}>\r\n//                 {i % 2 === 0 && <SkeletonCircle size={7} />}\r\n//                 <View style={{ flexDirection: 'column', justifyContent: 'space-between' }}>\r\n//                   <Skeleton height={8} width={250} />\r\n//                   <Skeleton height={8} width={250} />\r\n//                   <Skeleton height={8} width={250} />\r\n//                 </View>\r\n//                 {i % 2 !== 0 && <SkeletonCircle size={7} />}\r\n//               </View>\r\n//             ))}\r\n//           </View>\r\n//         ) : (\r\n//           messages.map((message) => (\r\n//             <View key={message._id} ref={messages.length - 1 === messages.indexOf(message) ? messageEndRef : null}>\r\n//               <Message message={message} ownMessage={currentUser._id === message.sender} />\r\n//             </View>\r\n//           ))\r\n//         )}\r\n//       </ScrollView>\r\n\r\n//       <MessageInput setMessages={setMessages} />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default MessageContainer;\r\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}