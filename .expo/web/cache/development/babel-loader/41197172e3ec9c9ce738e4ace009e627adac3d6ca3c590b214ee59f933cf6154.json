{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThreadsScreen = function ThreadsScreen() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    content = _useState2[0],\n    setContent = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    postedByName = _useState4[0],\n    setPostedByName = _useState4[1];\n  useEffect(function () {\n    axios.get(`http://localhost:3000/users/${userId}`).then(function (response) {\n      setPostedByName(response.data.name);\n    }).catch(function (error) {\n      console.error(\"Error fetching user information:\", error);\n    });\n  }, []);\n  var handlePostSubmit = function handlePostSubmit() {\n    if (!content.trim()) {\n      Alert.alert(\"Error\", \"Content cannot be empty\");\n      return;\n    }\n    var postData = {\n      text: content,\n      postedBy: postedByName\n    };\n    axios.post(\"http://localhost:3000/posts/create-post\", postData).then(function (response) {\n      console.log(\"Post created successfully:\", response.data);\n      setContent(\"\");\n    }).catch(function (error) {\n      console.error(\"Error creating post:\", error);\n      Alert.alert(\"Error\", \"Failed to create post. Please try again later.\");\n    });\n  };\n  return _jsxs(SafeAreaView, {\n    style: {\n      padding: 10\n    },\n    children: [_jsxs(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        padding: 10\n      },\n      children: [_jsx(Image, {\n        style: {\n          width: 40,\n          height: 40,\n          borderRadius: 20,\n          resizeMode: \"contain\"\n        },\n        source: {\n          uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\"\n        }\n      }), _jsx(Text, {\n        children: postedByName\n      }), \" \"]\n    }), _jsx(View, {\n      style: {\n        flexDirection: \"row\",\n        marginLeft: 10\n      },\n      children: _jsx(TextInput, {\n        value: content,\n        onChangeText: function onChangeText(text) {\n          return setContent(text);\n        },\n        placeholder: \"Type your message...\",\n        multiline: true,\n        style: {\n          borderWidth: 1,\n          borderColor: \"gray\",\n          borderRadius: 5,\n          padding: 10,\n          marginBottom: 10\n        }\n      })\n    }), _jsx(Button, {\n      onPress: handlePostSubmit,\n      title: \"Share Post\"\n    })]\n  });\n};\nexport default ThreadsScreen;","map":{"version":3,"names":["React","useState","useEffect","View","TextInput","Button","SafeAreaView","Image","Text","Alert","axios","jsx","_jsx","jsxs","_jsxs","ThreadsScreen","_useState","_useState2","_slicedToArray","content","setContent","_useState3","_useState4","postedByName","setPostedByName","get","userId","then","response","data","name","catch","error","console","handlePostSubmit","trim","alert","postData","text","postedBy","post","log","style","padding","children","flexDirection","alignItems","width","height","borderRadius","resizeMode","source","uri","marginLeft","value","onChangeText","placeholder","multiline","borderWidth","borderColor","marginBottom","onPress","title"],"sources":["C:/himanshu/threads-app/screens/ThreadsScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { View, TextInput, Button, SafeAreaView, Image, Text, Alert } from \"react-native\";\r\nimport axios from \"axios\";\r\n\r\nconst ThreadsScreen = () => {\r\n  const [content, setContent] = useState(\"\");\r\n  const [postedByName, setPostedByName] = useState(\"\"); // State to hold the name of the user who posted the content\r\n\r\n  useEffect(() => {\r\n    // Fetch user information (name) when the component mounts\r\n    // Replace 'userId' with the actual user ID from your authentication system\r\n    axios.get(`http://localhost:3000/users/${userId}`)\r\n      .then((response) => {\r\n        // Assuming the user object returned from the server has a 'name' property\r\n        setPostedByName(response.data.name);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching user information:\", error);\r\n      });\r\n  }, []);\r\n\r\n  const handlePostSubmit = () => {\r\n    // Check if content is empty\r\n    if (!content.trim()) {\r\n      Alert.alert(\"Error\", \"Content cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    // Prepare data for the POST request\r\n    const postData = {\r\n      text: content,\r\n      postedBy: postedByName, // Use the name of the user who posted the content\r\n    };\r\n\r\n    // Make the POST request to create a new post\r\n    axios.post(\"http://localhost:3000/posts/create-post\", postData)\r\n      .then((response) => {\r\n        console.log(\"Post created successfully:\", response.data);\r\n        // Optionally, you can show a success message or navigate to another screen\r\n        setContent(\"\"); // Clear the input field after successful post\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error creating post:\", error);\r\n        // Display an error message if the request fails\r\n        Alert.alert(\"Error\", \"Failed to create post. Please try again later.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={{ padding: 10 }}>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 10 }}>\r\n        <Image\r\n          style={{ width: 40, height: 40, borderRadius: 20, resizeMode: \"contain\" }}\r\n          source={{ uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\" }}\r\n        />\r\n        <Text>{postedByName}</Text> {/* Display the name of the user */}\r\n      </View>\r\n\r\n      <View style={{ flexDirection: \"row\", marginLeft: 10 }}>\r\n        <TextInput\r\n          value={content}\r\n          onChangeText={(text) => setContent(text)}\r\n          placeholder=\"Type your message...\"\r\n          multiline\r\n          style={{ borderWidth: 1, borderColor: \"gray\", borderRadius: 5, padding: 10, marginBottom: 10 }}\r\n        />\r\n      </View>\r\n\r\n      <Button onPress={handlePostSubmit} title=\"Share Post\" />\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default ThreadsScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}