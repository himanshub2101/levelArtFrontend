{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport axios from \"axios\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport jwt_decode from \"jwt-decode\";\nimport User from \"../components/User\";\nimport { UserType } from \"../UserContext\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ActivityScreen = function ActivityScreen() {\n  var _useState = useState(\"people\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedButton = _useState2[0],\n    setSelectedButton = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    users = _useState4[0],\n    setUsers = _useState4[1];\n  var _useContext = useContext(UserType),\n    userId = _useContext.userId;\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    notifications = _useState6[0],\n    setNotifications = _useState6[1];\n  useEffect(function () {\n    var fetchNotifications = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var token = yield AsyncStorage.getItem(\"authToken\");\n          var decodedToken = jwt_decode(token);\n          var _userId = decodedToken.userId;\n          var response = yield axios.get(`http://localhost:3000/notifications/${_userId}`);\n          setNotifications(response.data);\n        } catch (error) {\n          console.log(\"Error fetching notifications:\", error);\n        }\n      });\n      return function fetchNotifications() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchNotifications();\n  }, []);\n  var handleButtonClick = function handleButtonClick(buttonName) {\n    setSelectedButton(buttonName);\n  };\n  return _jsx(ScrollView, {\n    style: {\n      marginTop: 50\n    },\n    children: _jsxs(View, {\n      style: {\n        padding: 10\n      },\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 18,\n          fontWeight: \"bold\"\n        },\n        children: \"Activity\"\n      }), _jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          gap: 10,\n          marginTop: 12\n        },\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleButtonClick(\"people\");\n          },\n          style: [styles.button, selectedButton === \"people\" ? {\n            backgroundColor: \"black\"\n          } : null],\n          children: _jsx(Text, {\n            style: [styles.buttonText, selectedButton === \"people\" ? {\n              color: \"white\"\n            } : null],\n            children: \"People\"\n          })\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleButtonClick(\"all\");\n          },\n          style: [styles.button, selectedButton === \"all\" ? {\n            backgroundColor: \"black\"\n          } : null],\n          children: _jsx(Text, {\n            style: [styles.buttonText, selectedButton === \"all\" ? {\n              color: \"white\"\n            } : null],\n            children: \"All\"\n          })\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleButtonClick(\"requests\");\n          },\n          style: [styles.button, selectedButton === \"requests\" ? {\n            backgroundColor: \"black\"\n          } : null],\n          children: _jsx(Text, {\n            style: [styles.buttonText, selectedButton === \"requests\" ? {\n              color: \"white\"\n            } : null],\n            children: \"Requests\"\n          })\n        })]\n      }), _jsx(View, {\n        children: notifications.map(function (notification, index) {\n          return _jsx(Text, {\n            children: notification.message\n          }, index);\n        })\n      }), _jsx(View, {\n        children: selectedButton === \"people\" && _jsx(View, {\n          style: {\n            marginTop: 20\n          },\n          children: users.map(function (item, index) {\n            return _jsx(User, {\n              item: item\n            }, index);\n          })\n        })\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    backgroundColor: \"white\",\n    borderColor: \"#D0D0D0\",\n    borderRadius: 6,\n    borderWidth: 0.7\n  },\n  buttonText: {\n    textAlign: \"center\",\n    fontWeight: \"bold\"\n  }\n});\nexport default ActivityScreen;","map":{"version":3,"names":["React","useState","useEffect","useContext","ScrollView","View","Text","TouchableOpacity","StyleSheet","axios","AsyncStorage","jwt_decode","User","UserType","jsx","_jsx","jsxs","_jsxs","ActivityScreen","_useState","_useState2","_slicedToArray","selectedButton","setSelectedButton","_useState3","_useState4","users","setUsers","_useContext","userId","_useState5","_useState6","notifications","setNotifications","fetchNotifications","_ref","_asyncToGenerator","token","getItem","decodedToken","response","get","data","error","console","log","apply","arguments","handleButtonClick","buttonName","style","marginTop","children","padding","fontSize","fontWeight","flexDirection","alignItems","gap","onPress","styles","button","backgroundColor","buttonText","color","map","notification","index","message","item","create","flex","paddingVertical","paddingHorizontal","borderColor","borderRadius","borderWidth","textAlign"],"sources":["C:/Users/DELL/Documents/Confidentials/levelArtFrontend/screens/ActivityScreen.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ScrollView, View, Text, TouchableOpacity, StyleSheet } from \"react-native\";\r\nimport axios from \"axios\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport User from \"../components/User\";\r\nimport { UserType } from \"../UserContext\";\r\n\r\nconst ActivityScreen = () => {\r\n  const [selectedButton, setSelectedButton] = useState(\"people\");\r\n  const [users, setUsers] = useState([]);\r\n  const { userId } = useContext(UserType);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  // Fetch notifications from the backend\r\n  useEffect(() => {\r\n    const fetchNotifications = async () => {\r\n      try {\r\n        const token = await AsyncStorage.getItem(\"authToken\");\r\n        const decodedToken = jwt_decode(token);\r\n        const userId = decodedToken.userId;\r\n        \r\n        const response = await axios.get(`http://localhost:3000/notifications/${userId}`);\r\n        setNotifications(response.data);\r\n      } catch (error) {\r\n        console.log(\"Error fetching notifications:\", error);\r\n      }\r\n    };\r\n\r\n    fetchNotifications();\r\n  }, []);\r\n\r\n  // Function to handle button click\r\n  const handleButtonClick = (buttonName) => {\r\n    setSelectedButton(buttonName);\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={{ marginTop: 50 }}>\r\n      <View style={{ padding: 10 }}>\r\n        <Text style={{ fontSize: 18, fontWeight: \"bold\" }}>Activity</Text>\r\n\r\n        {/* Buttons for different activities */}\r\n        <View style={{ flexDirection: \"row\", alignItems: \"center\", gap: 10, marginTop: 12 }}>\r\n          <TouchableOpacity\r\n            onPress={() => handleButtonClick(\"people\")}\r\n            style={[\r\n              styles.button,\r\n              selectedButton === \"people\" ? { backgroundColor: \"black\" } : null,\r\n            ]}\r\n          >\r\n            <Text style={[styles.buttonText, selectedButton === \"people\" ? { color: \"white\" } : null]}>People</Text>\r\n          </TouchableOpacity>\r\n\r\n          <TouchableOpacity\r\n            onPress={() => handleButtonClick(\"all\")}\r\n            style={[\r\n              styles.button,\r\n              selectedButton === \"all\" ? { backgroundColor: \"black\" } : null,\r\n            ]}\r\n          >\r\n            <Text style={[styles.buttonText, selectedButton === \"all\" ? { color: \"white\" } : null]}>All</Text>\r\n          </TouchableOpacity>\r\n\r\n          <TouchableOpacity\r\n            onPress={() => handleButtonClick(\"requests\")}\r\n            style={[\r\n              styles.button,\r\n              selectedButton === \"requests\" ? { backgroundColor: \"black\" } : null,\r\n            ]}\r\n          >\r\n            <Text style={[styles.buttonText, selectedButton === \"requests\" ? { color: \"white\" } : null]}>Requests</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n\r\n        {/* Display notifications */}\r\n        <View>\r\n          {notifications.map((notification, index) => (\r\n            <Text key={index}>{notification.message}</Text>\r\n          ))}\r\n        </View>\r\n\r\n        {/* Display users based on selected activity */}\r\n        <View>\r\n          {selectedButton === \"people\" && (\r\n            <View style={{marginTop:20}}>\r\n              {users.map((item, index) => (\r\n                <User key={index} item={item} />\r\n              ))}\r\n            </View>\r\n          )}\r\n        </View>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    flex: 1,\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 20,\r\n    backgroundColor: \"white\",\r\n    borderColor: \"#D0D0D0\",\r\n    borderRadius: 6,\r\n    borderWidth: 0.7,\r\n  },\r\n  buttonText: {\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nexport default ActivityScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}