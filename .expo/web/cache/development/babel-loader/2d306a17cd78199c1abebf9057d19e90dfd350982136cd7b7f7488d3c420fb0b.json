{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Avatar } from 'react-native-elements';\nimport { BsCheck2All } from 'react-icons/bs';\nimport { useRecoilValue } from 'recoil';\nimport { selectedConversationAtom } from \"../atoms/messagesAtom\";\nimport userAtom from \"../atoms/usersAtom\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Message = function Message(_ref) {\n  var ownMessage = _ref.ownMessage,\n    message = _ref.message;\n  var selectedConversation = useRecoilValue(selectedConversationAtom);\n  var users = useRecoilValue(userAtom);\n  var user = users[0];\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    imgLoaded = _useState2[0],\n    setImgLoaded = _useState2[1];\n  return _jsx(View, {\n    style: {\n      flexDirection: 'column'\n    },\n    children: ownMessage ? _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        justifyContent: 'flex-end'\n      },\n      children: [message.text && _jsxs(View, {\n        style: {\n          backgroundColor: 'green',\n          maxWidth: 350,\n          padding: 8,\n          borderRadius: 8,\n          marginBottom: 8\n        },\n        children: [_jsx(Text, {\n          style: {\n            color: 'white'\n          },\n          children: message.text\n        }), _jsx(View, {\n          style: {\n            alignSelf: 'flex-end',\n            marginLeft: 8,\n            color: message.seen ? 'blue' : 'black',\n            fontWeight: 'bold'\n          },\n          children: _jsx(BsCheck2All, {\n            size: 16\n          })\n        })]\n      }), message.img && !imgLoaded && _jsxs(View, {\n        style: {\n          marginTop: 5\n        },\n        children: [_jsx(Image, {\n          source: {\n            uri: message.img\n          },\n          style: {\n            width: 200,\n            height: 200,\n            display: 'none'\n          },\n          onLoad: function onLoad() {\n            return setImgLoaded(true);\n          }\n        }), !imgLoaded && _jsx(View, {\n          style: {\n            width: 200,\n            height: 200,\n            backgroundColor: 'grey'\n          }\n        })]\n      }), message.img && imgLoaded && _jsxs(View, {\n        style: {\n          marginTop: 5\n        },\n        children: [_jsx(Image, {\n          source: {\n            uri: message.img\n          },\n          style: {\n            width: 200,\n            height: 200,\n            borderRadius: 4\n          }\n        }), _jsx(View, {\n          style: {\n            alignSelf: 'flex-end',\n            marginLeft: 8,\n            color: message.seen ? 'blue' : 'black',\n            fontWeight: 'bold'\n          },\n          children: _jsx(BsCheck2All, {\n            size: 16\n          })\n        })]\n      }), _jsx(Avatar, {\n        source: {\n          uri: user.profilePic\n        },\n        rounded: true,\n        size: \"medium\",\n        containerStyle: {\n          marginLeft: 8\n        }\n      })]\n    }) : _jsxs(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: [_jsx(Avatar, {\n        source: {\n          uri: selectedConversation.userProfilePic\n        },\n        rounded: true,\n        size: \"medium\"\n      }), message.text && _jsx(View, {\n        style: {\n          maxWidth: 350,\n          backgroundColor: 'gray',\n          padding: 8,\n          borderRadius: 8,\n          marginLeft: 8\n        },\n        children: _jsx(Text, {\n          children: message.text\n        })\n      }), message.img && !imgLoaded && _jsxs(View, {\n        style: {\n          marginTop: 5\n        },\n        children: [_jsx(Image, {\n          source: {\n            uri: message.img\n          },\n          style: {\n            width: 200,\n            height: 200,\n            display: 'none'\n          },\n          onLoad: function onLoad() {\n            return setImgLoaded(true);\n          }\n        }), !imgLoaded && _jsx(View, {\n          style: {\n            width: 200,\n            height: 200,\n            backgroundColor: 'grey'\n          }\n        })]\n      }), message.img && imgLoaded && _jsx(View, {\n        style: {\n          marginTop: 5\n        },\n        children: _jsx(Image, {\n          source: {\n            uri: message.img\n          },\n          style: {\n            width: 200,\n            height: 200,\n            borderRadius: 4\n          }\n        })\n      })]\n    })\n  });\n};\nexport default Message;","map":{"version":3,"names":["React","useState","View","Text","Image","Avatar","BsCheck2All","useRecoilValue","selectedConversationAtom","userAtom","jsx","_jsx","jsxs","_jsxs","Message","_ref","ownMessage","message","selectedConversation","users","user","_useState","_useState2","_slicedToArray","imgLoaded","setImgLoaded","style","flexDirection","children","justifyContent","text","backgroundColor","maxWidth","padding","borderRadius","marginBottom","color","alignSelf","marginLeft","seen","fontWeight","size","img","marginTop","source","uri","width","height","display","onLoad","profilePic","rounded","containerStyle","userProfilePic"],"sources":["C:/Users/DELL/Documents/Confidentials/levelArtFrontend/components/message.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, Image } from 'react-native';\r\nimport { Avatar } from 'react-native-elements'; // Import Avatar from react-native-elements\r\nimport { BsCheck2All } from 'react-icons/bs'; // Assuming you're using a custom icon library in React Native\r\nimport { useRecoilValue } from 'recoil';\r\nimport { selectedConversationAtom } from '../atoms/messagesAtom';\r\nimport userAtom from '../atoms/usersAtom'; // Import userAtom correctly\r\n\r\nconst Message = ({ ownMessage, message }) => {\r\n  const selectedConversation = useRecoilValue(selectedConversationAtom);\r\n  const users = useRecoilValue(userAtom); // Use the users array returned by userAtom\r\n  const user = users[0]; // Assuming you only have one user in the array, adjust accordingly if needed\r\n  const [imgLoaded, setImgLoaded] = useState(false);\r\n\r\n  return (\r\n    <View style={{ flexDirection: 'column' }}>\r\n      {ownMessage ? (\r\n        <View style={{ flexDirection: 'row', justifyContent: 'flex-end' }}>\r\n          {message.text && (\r\n            <View\r\n              style={{\r\n                backgroundColor: 'green',\r\n                maxWidth: 350,\r\n                padding: 8,\r\n                borderRadius: 8,\r\n                marginBottom: 8,\r\n              }}>\r\n              <Text style={{ color: 'white' }}>{message.text}</Text>\r\n              <View\r\n                style={{\r\n                  alignSelf: 'flex-end',\r\n                  marginLeft: 8,\r\n                  color: message.seen ? 'blue' : 'black',\r\n                  fontWeight: 'bold',\r\n                }}>\r\n                <BsCheck2All size={16} />\r\n              </View>\r\n            </View>\r\n          )}\r\n          {message.img && !imgLoaded && (\r\n            <View style={{ marginTop: 5 }}>\r\n              <Image\r\n                source={{ uri: message.img }}\r\n                style={{ width: 200, height: 200, display: 'none' }}\r\n                onLoad={() => setImgLoaded(true)}\r\n              />\r\n              {/* Replace with custom loading indicator */}\r\n              {!imgLoaded && <View style={{ width: 200, height: 200, backgroundColor: 'grey' }}></View>}\r\n            </View>\r\n          )}\r\n          {message.img && imgLoaded && (\r\n            <View style={{ marginTop: 5 }}>\r\n              <Image source={{ uri: message.img }} style={{ width: 200, height: 200, borderRadius: 4 }} />\r\n              <View\r\n                style={{\r\n                  alignSelf: 'flex-end',\r\n                  marginLeft: 8,\r\n                  color: message.seen ? 'blue' : 'black',\r\n                  fontWeight: 'bold',\r\n                }}>\r\n                <BsCheck2All size={16} />\r\n              </View>\r\n            </View>\r\n          )}\r\n          <Avatar\r\n            source={{ uri: user.profilePic }}\r\n            rounded\r\n            size=\"medium\"\r\n            containerStyle={{ marginLeft: 8 }}\r\n          />\r\n        </View>\r\n      ) : (\r\n        <View style={{ flexDirection: 'row' }}>\r\n          <Avatar\r\n            source={{ uri: selectedConversation.userProfilePic }}\r\n            rounded\r\n            size=\"medium\"\r\n          />\r\n          {message.text && (\r\n            <View style={{ maxWidth: 350, backgroundColor: 'gray', padding: 8, borderRadius: 8, marginLeft: 8 }}>\r\n              <Text>{message.text}</Text>\r\n            </View>\r\n          )}\r\n          {message.img && !imgLoaded && (\r\n            <View style={{ marginTop: 5 }}>\r\n              <Image\r\n                source={{ uri: message.img }}\r\n                style={{ width: 200, height: 200, display: 'none' }}\r\n                onLoad={() => setImgLoaded(true)}\r\n              />\r\n              {/* Replace with custom loading indicator */}\r\n              {!imgLoaded && <View style={{ width: 200, height: 200, backgroundColor: 'grey' }}></View>}\r\n            </View>\r\n          )}\r\n          {message.img && imgLoaded && (\r\n            <View style={{ marginTop: 5 }}>\r\n              <Image source={{ uri: message.img }} style={{ width: 200, height: 200, borderRadius: 4 }} />\r\n            </View>\r\n          )}\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}