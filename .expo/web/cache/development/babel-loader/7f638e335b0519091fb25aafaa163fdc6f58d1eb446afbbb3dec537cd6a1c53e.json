{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useRef, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Avatar, Divider, useColorModeValue } from 'react-native-elements';\nimport Message from \"./message\";\nimport MessageInput from \"./messageInput\";\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { selectedConversationAtom } from \"../atoms/messagesAtom\";\nimport userAtom from \"../atoms/usersAtom\";\nimport { useSocket } from \"../context/socket\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MessageContainer = function MessageContainer() {\n  var selectedConversation = useRecoilValue(selectedConversationAtom);\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    loadingMessages = _useState2[0],\n    setLoadingMessages = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    messages = _useState4[0],\n    setMessages = _useState4[1];\n  var currentUser = useRecoilValue(userAtom)[0];\n  var _useSocket = useSocket(),\n    socket = _useSocket.socket;\n  var setConversations = useSetRecoilState(conversationsAtom);\n  var messageEndRef = useRef(null);\n  useEffect(function () {\n    socket.on('newMessage', function (message) {\n      if (selectedConversation._id === message.conversationId) {\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [message]);\n        });\n      }\n      if (!document.hasFocus()) {\n        var sound = new Audio(messageSound);\n        sound.play();\n      }\n      setConversations(function (prev) {\n        var updatedConversations = prev.map(function (conversation) {\n          if (conversation._id === message.conversationId) {\n            return _objectSpread(_objectSpread({}, conversation), {}, {\n              lastMessage: {\n                text: message.text,\n                sender: message.sender\n              }\n            });\n          }\n          return conversation;\n        });\n        return updatedConversations;\n      });\n    });\n    return function () {\n      return socket.off('newMessage');\n    };\n  }, [socket, selectedConversation, setConversations]);\n  useEffect(function () {\n    var lastMessageIsFromOtherUser = messages.length && messages[messages.length - 1].sender !== currentUser._id;\n    if (lastMessageIsFromOtherUser) {\n      socket.emit('markMessagesAsSeen', {\n        conversationId: selectedConversation._id,\n        userId: selectedConversation.userId\n      });\n    }\n    socket.on('messagesSeen', function (_ref) {\n      var conversationId = _ref.conversationId;\n      if (selectedConversation._id === conversationId) {\n        setMessages(function (prev) {\n          var updatedMessages = prev.map(function (message) {\n            if (!message.seen) {\n              return _objectSpread(_objectSpread({}, message), {}, {\n                seen: true\n              });\n            }\n            return message;\n          });\n          return updatedMessages;\n        });\n      }\n    });\n  }, [socket, currentUser._id, messages, selectedConversation]);\n  useEffect(function () {\n    var getMessages = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        setLoadingMessages(true);\n        setMessages([]);\n        try {\n          if (selectedConversation.mock) return;\n          var res = yield fetch(`/api/messages/${selectedConversation.userId}`);\n          var data = yield res.json();\n          if (data.error) {\n            showToast('Error', data.error);\n            return;\n          }\n          setMessages(data);\n        } catch (error) {\n          showToast('Error', error.message);\n        } finally {\n          setLoadingMessages(false);\n        }\n      });\n      return function getMessages() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    getMessages();\n  }, [selectedConversation.userId, selectedConversation.mock]);\n  var bgColor = useColorModeValue('gray.200', 'gray.dark');\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      backgroundColor: bgColor,\n      borderRadius: 8,\n      padding: 8\n    },\n    children: [_jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingVertical: 8\n      },\n      children: [_jsx(Avatar, {\n        source: {\n          uri: selectedConversation.userProfilePic\n        },\n        size: \"small\"\n      }), _jsxs(Text, {\n        children: [selectedConversation.username, \" \", _jsx(Image, {\n          source: require(\"../assets/logo.png\"),\n          style: {\n            width: 4,\n            height: 4\n          }\n        })]\n      })]\n    }), _jsx(Divider, {}), _jsx(ScrollView, {\n      contentContainerStyle: {\n        flexGrow: 1\n      },\n      children: loadingMessages ? _jsx(View, {\n        children: _toConsumableArray(Array(5)).map(function (_, i) {\n          return _jsxs(View, {\n            style: {\n              flexDirection: i % 2 === 0 ? 'row' : 'row-reverse',\n              alignItems: 'center',\n              padding: 4\n            },\n            children: [i % 2 === 0 && _jsx(SkeletonCircle, {\n              size: 7\n            }), _jsxs(View, {\n              style: {\n                flexDirection: 'column',\n                justifyContent: 'space-between'\n              },\n              children: [_jsx(Skeleton, {\n                height: 8,\n                width: 250\n              }), _jsx(Skeleton, {\n                height: 8,\n                width: 250\n              }), _jsx(Skeleton, {\n                height: 8,\n                width: 250\n              })]\n            }), i % 2 !== 0 && _jsx(SkeletonCircle, {\n              size: 7\n            })]\n          }, i);\n        })\n      }) : messages.map(function (message) {\n        return _jsx(View, {\n          ref: messages.length - 1 === messages.indexOf(message) ? messageEndRef : null,\n          children: _jsx(Message, {\n            message: message,\n            ownMessage: currentUser._id === message.sender\n          })\n        }, message._id);\n      })\n    }), _jsx(MessageInput, {\n      setMessages: setMessages\n    })]\n  });\n};\nexport default MessageContainer;","map":{"version":3,"names":["React","useEffect","useRef","useState","View","Text","Image","ScrollView","Avatar","Divider","useColorModeValue","Message","MessageInput","useRecoilValue","useSetRecoilState","selectedConversationAtom","userAtom","useSocket","jsx","_jsx","jsxs","_jsxs","MessageContainer","selectedConversation","_useState","_useState2","_slicedToArray","loadingMessages","setLoadingMessages","_useState3","_useState4","messages","setMessages","currentUser","_useSocket","socket","setConversations","conversationsAtom","messageEndRef","on","message","_id","conversationId","prev","concat","_toConsumableArray","document","hasFocus","sound","Audio","messageSound","play","updatedConversations","map","conversation","_objectSpread","lastMessage","text","sender","off","lastMessageIsFromOtherUser","length","emit","userId","_ref","updatedMessages","seen","getMessages","_ref2","_asyncToGenerator","mock","res","fetch","data","json","error","showToast","apply","arguments","bgColor","style","flex","backgroundColor","borderRadius","padding","children","flexDirection","alignItems","paddingVertical","source","uri","userProfilePic","size","username","require","width","height","contentContainerStyle","flexGrow","Array","_","i","SkeletonCircle","justifyContent","Skeleton","ref","indexOf","ownMessage"],"sources":["C:/Users/DELL/Documents/Confidentials/levelArtFrontend/components/messageContainer.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { View, Text, Image, ScrollView } from 'react-native';\r\nimport { Avatar, Divider, useColorModeValue } from 'react-native-elements'; // Import Avatar and Divider from react-native-elements\r\nimport Message from './message';\r\nimport MessageInput from './messageInput';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport { selectedConversationAtom } from '../atoms/messagesAtom';\r\nimport userAtom from '../atoms/usersAtom';\r\nimport { useSocket } from '../context/socket';\r\n\r\nconst MessageContainer = () => {\r\n  const selectedConversation = useRecoilValue(selectedConversationAtom);\r\n  const [loadingMessages, setLoadingMessages] = useState(true);\r\n  const [messages, setMessages] = useState([]); // Adjust the type of messages as needed\r\n  const currentUser = useRecoilValue(userAtom)[0];\r\n  const { socket } = useSocket();\r\n  const setConversations = useSetRecoilState(conversationsAtom);\r\n  const messageEndRef = useRef(null); // Adjust the ref type as needed\r\n\r\n  useEffect(() => {\r\n    socket.on('newMessage', (message) => {\r\n      if (selectedConversation._id === message.conversationId) {\r\n        setMessages((prev) => [...prev, message]);\r\n      }\r\n\r\n      if (!document.hasFocus()) {\r\n        const sound = new Audio(messageSound);\r\n        sound.play();\r\n      }\r\n\r\n      setConversations((prev) => {\r\n        const updatedConversations = prev.map((conversation) => {\r\n          if (conversation._id === message.conversationId) {\r\n            return {\r\n              ...conversation,\r\n              lastMessage: {\r\n                text: message.text,\r\n                sender: message.sender,\r\n              },\r\n            };\r\n          }\r\n          return conversation;\r\n        });\r\n        return updatedConversations;\r\n      });\r\n    });\r\n\r\n    return () => socket.off('newMessage');\r\n  }, [socket, selectedConversation, setConversations]);\r\n\r\n  useEffect(() => {\r\n    const lastMessageIsFromOtherUser = messages.length && messages[messages.length - 1].sender !== currentUser._id;\r\n    if (lastMessageIsFromOtherUser) {\r\n      socket.emit('markMessagesAsSeen', {\r\n        conversationId: selectedConversation._id,\r\n        userId: selectedConversation.userId,\r\n      });\r\n    }\r\n\r\n    socket.on('messagesSeen', ({ conversationId }) => {\r\n      if (selectedConversation._id === conversationId) {\r\n        setMessages((prev) => {\r\n          const updatedMessages = prev.map((message) => {\r\n            if (!message.seen) {\r\n              return {\r\n                ...message,\r\n                seen: true,\r\n              };\r\n            }\r\n            return message;\r\n          });\r\n          return updatedMessages;\r\n        });\r\n      }\r\n    });\r\n  }, [socket, currentUser._id, messages, selectedConversation]);\r\n\r\n  useEffect(() => {\r\n    const getMessages = async () => {\r\n      setLoadingMessages(true);\r\n      setMessages([]);\r\n      try {\r\n        if (selectedConversation.mock) return;\r\n        const res = await fetch(`/api/messages/${selectedConversation.userId}`);\r\n        const data = await res.json();\r\n        if (data.error) {\r\n          showToast('Error', data.error);\r\n          return;\r\n        }\r\n        setMessages(data);\r\n      } catch (error) {\r\n        showToast('Error', error.message);\r\n      } finally {\r\n        setLoadingMessages(false);\r\n      }\r\n    };\r\n\r\n    getMessages();\r\n  }, [selectedConversation.userId, selectedConversation.mock]);\r\n\r\n  const bgColor = useColorModeValue('gray.200', 'gray.dark');\r\n\r\n  return (\r\n    <View style={{ flex: 1, backgroundColor: bgColor, borderRadius: 8, padding: 8 }}>\r\n      {/* Message header */}\r\n      <View style={{ flexDirection: 'row', alignItems: 'center', paddingVertical: 8 }}>\r\n        <Avatar source={{ uri: selectedConversation.userProfilePic }} size=\"small\" />\r\n        <Text>\r\n          {selectedConversation.username} <Image source={require('../assets/logo.png')} style={{ width: 4, height: 4 }} />\r\n        </Text>\r\n      </View>\r\n\r\n      <Divider />\r\n\r\n      <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\r\n        {loadingMessages ? (\r\n          <View>\r\n            {[...Array(5)].map((_, i) => (\r\n              <View key={i} style={{ flexDirection: i % 2 === 0 ? 'row' : 'row-reverse', alignItems: 'center', padding: 4 }}>\r\n                {i % 2 === 0 && <SkeletonCircle size={7} />}\r\n                <View style={{ flexDirection: 'column', justifyContent: 'space-between' }}>\r\n                  <Skeleton height={8} width={250} />\r\n                  <Skeleton height={8} width={250} />\r\n                  <Skeleton height={8} width={250} />\r\n                </View>\r\n                {i % 2 !== 0 && <SkeletonCircle size={7} />}\r\n              </View>\r\n            ))}\r\n          </View>\r\n        ) : (\r\n          messages.map((message) => (\r\n            <View key={message._id} ref={messages.length - 1 === messages.indexOf(message) ? messageEndRef : null}>\r\n              <Message message={message} ownMessage={currentUser._id === message.sender} />\r\n            </View>\r\n          ))\r\n        )}\r\n      </ScrollView>\r\n\r\n      <MessageInput setMessages={setMessages} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default MessageContainer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}