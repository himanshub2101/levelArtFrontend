{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/DELL/Documents/Confidentials/levelArtFrontend/components/messageInput.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\r\n// import { View, TextInput, TouchableOpacity, Modal, Image, ActivityIndicator } from 'react-native';\r\n// import { IconButton } from 'react-native-paper'; // Import IconButton from Material-UI\r\n// import useShowToast from '../hooks/useShowToast';\r\n// import { conversationsAtom, selectedConversationAtom } from '../atoms/messagesAtom';\r\n// import { useRecoilValue, useSetRecoilState } from 'recoil';\r\n// import { BsFillImageFill } from 'react-icons/bs'; // Make sure to have the BsFillImageFill icon available in your project\r\n\r\n// const MessageInput = ({ setMessages }) => {\r\n//   const [messageText, setMessageText] = useState('');\r\n//   const showToast = useShowToast();\r\n//   const selectedConversation = useRecoilValue(selectedConversationAtom);\r\n//   const setConversations = useSetRecoilState(conversationsAtom);\r\n//   const imageRef = useRef(null);\r\n//   const [imgUrl, setImgUrl] = useState('');\r\n//   const [isSending, setIsSending] = useState(false);\r\n\r\n//   const handleSendMessage = async () => {\r\n//     if (!messageText && !imgUrl) return;\r\n//     if (isSending) return;\r\n\r\n//     setIsSending(true);\r\n\r\n//     try {\r\n//       const res = await fetch('/api/messages', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           message: messageText,\r\n//           recipientId: selectedConversation.userId,\r\n//           img: imgUrl,\r\n//         }),\r\n//       });\r\n//       const data = await res.json();\r\n//       if (data.error) {\r\n//         showToast('Error', data.error);\r\n//         return;\r\n//       }\r\n\r\n//       setMessages((messages) => [...messages, data]);\r\n\r\n//       setConversations((prevConvs) => {\r\n//         const updatedConversations = prevConvs.map((conversation) => {\r\n//           if (conversation._id === selectedConversation._id) {\r\n//             return {\r\n//               ...conversation,\r\n//               lastMessage: {\r\n//                 text: messageText,\r\n//                 sender: data.sender,\r\n//               },\r\n//             };\r\n//           }\r\n//           return conversation;\r\n//         });\r\n//         return updatedConversations;\r\n//       });\r\n\r\n//       setMessageText('');\r\n//       setImgUrl('');\r\n//     } catch (error) {\r\n//       showToast('Error', error.message);\r\n//     } finally {\r\n//       setIsSending(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleImageChange = (event) => {\r\n//     const file = event.target.files[0];\r\n//     if (!file) return;\r\n\r\n//     const reader = new FileReader();\r\n//     reader.onloadend = () => {\r\n//       setImgUrl(reader.result);\r\n//     };\r\n//     reader.readAsDataURL(file);\r\n//   };\r\n\r\n//   return (\r\n//     <View style={{ flexDirection: 'row', alignItems: 'center', paddingHorizontal: 8 }}>\r\n//       <TextInput\r\n//         style={{ flex: 1, height: 40, borderWidth: 1, borderColor: 'gray', borderRadius: 20, paddingHorizontal: 10 }}\r\n//         placeholder=\"Type a message\"\r\n//         value={messageText}\r\n//         onChangeText={setMessageText}\r\n//       />\r\n//       <TouchableOpacity onPress={handleSendMessage} style={{ marginLeft: 8 }}>\r\n//         <IconButton icon=\"send\" size={24} />\r\n//       </TouchableOpacity>\r\n//       <TouchableOpacity onPress={() => imageRef.current?.click()} style={{ marginLeft: 8 }}>\r\n//         <BsFillImageFill size={24} />\r\n//         <input type=\"file\" ref={imageRef} style={{ display: 'none' }} onChange={handleImageChange} />\r\n//       </TouchableOpacity>\r\n//       <Modal visible={!!imgUrl} animationType=\"slide\" onRequestClose={() => setImgUrl('')}>\r\n//         <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n//           <Image source={{ uri: imgUrl }} style={{ width: '100%', height: '100%' }} resizeMode=\"contain\" />\r\n//           <View style={{ position: 'absolute', bottom: 20, right: 20 }}>\r\n//             {isSending ? (\r\n//               <ActivityIndicator size=\"small\" color=\"#0000ff\" />\r\n//             ) : (\r\n//               <TouchableOpacity onPress={handleSendMessage}>\r\n//                 <IconButton icon=\"send\" size={24} />\r\n//               </TouchableOpacity>\r\n//             )}\r\n//           </View>\r\n//         </View>\r\n//       </Modal>\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default MessageInput;\r\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}