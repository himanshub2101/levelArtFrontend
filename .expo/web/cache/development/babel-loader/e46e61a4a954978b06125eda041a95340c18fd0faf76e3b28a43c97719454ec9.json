{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThreadsScreen = function ThreadsScreen() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    content = _useState2[0],\n    setContent = _useState2[1];\n  var handlePostSubmit = function handlePostSubmit() {\n    if (!content.trim()) {\n      Alert.alert(\"Error\", \"Content cannot be empty\");\n      return;\n    }\n    var postData = {\n      text: content,\n      postedBy: us\n    };\n    axios.post(\"http://localhost:3000/posts/create-post\", postData).then(function (response) {\n      console.log(\"Post created successfully:\", response.data);\n      setContent(\"\");\n    }).catch(function (error) {\n      console.error(\"Error creating post:\", error);\n      Alert.alert(\"Error\", \"Failed to create post. Please try again later.\");\n    });\n  };\n  return _jsxs(View, {\n    style: {\n      padding: 10\n    },\n    children: [_jsx(TextInput, {\n      value: content,\n      onChangeText: function onChangeText(text) {\n        return setContent(text);\n      },\n      placeholder: \"Type your message...\",\n      multiline: true,\n      style: {\n        borderWidth: 1,\n        borderColor: \"gray\",\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n      }\n    }), _jsx(Button, {\n      onPress: handlePostSubmit,\n      title: \"Share Post\"\n    })]\n  });\n};\nexport default ThreadsScreen;","map":{"version":3,"names":["React","useState","View","TextInput","Button","Alert","axios","jsx","_jsx","jsxs","_jsxs","ThreadsScreen","_useState","_useState2","_slicedToArray","content","setContent","handlePostSubmit","trim","alert","postData","text","postedBy","us","post","then","response","console","log","data","catch","error","style","padding","children","value","onChangeText","placeholder","multiline","borderWidth","borderColor","borderRadius","marginBottom","onPress","title"],"sources":["C:/himanshu/threads-app/screens/ThreadsScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, TextInput, Button, Alert } from \"react-native\";\r\nimport axios from \"axios\";\r\n\r\nconst ThreadsScreen = () => {\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const handlePostSubmit = () => {\r\n    // Check if content is empty\r\n    if (!content.trim()) {\r\n      Alert.alert(\"Error\", \"Content cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    // Prepare data for the POST request\r\n    const postData = {\r\n      text: content,\r\n      postedBy: us, // Replace with the actual user ID\r\n    };\r\n\r\n    // Make the POST request to create a new post\r\n    axios.post(\"http://localhost:3000/posts/create-post\", postData)\r\n      .then((response) => {\r\n        console.log(\"Post created successfully:\", response.data);\r\n        // Optionally, you can show a success message or navigate to another screen\r\n        setContent(\"\"); // Clear the input field after successful post\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error creating post:\", error);\r\n        // Display an error message if the request fails\r\n        Alert.alert(\"Error\", \"Failed to create post. Please try again later.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <View style={{ padding: 10 }}>\r\n      <TextInput\r\n        value={content}\r\n        onChangeText={(text) => setContent(text)}\r\n        placeholder=\"Type your message...\"\r\n        multiline\r\n        style={{\r\n          borderWidth: 1,\r\n          borderColor: \"gray\",\r\n          borderRadius: 5,\r\n          padding: 10,\r\n          marginBottom: 10,\r\n        }}\r\n      />\r\n      <Button onPress={handlePostSubmit} title=\"Share Post\" />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ThreadsScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,KAAA;AAExC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE1B,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EAC1B,IAAAC,SAAA,GAA8BX,QAAQ,CAAC,EAAE,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1B,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS;IAE7B,IAAI,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC,EAAE;MACnBb,KAAK,CAACc,KAAK,CAAC,OAAO,EAAE,yBAAyB,CAAC;MAC/C;IACF;IAGA,IAAMC,QAAQ,GAAG;MACfC,IAAI,EAAEN,OAAO;MACbO,QAAQ,EAAEC;IACZ,CAAC;IAGDjB,KAAK,CAACkB,IAAI,CAAC,yCAAyC,EAAEJ,QAAQ,CAAC,CAC5DK,IAAI,CAAC,UAACC,QAAQ,EAAK;MAClBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,QAAQ,CAACG,IAAI,CAAC;MAExDb,UAAU,CAAC,EAAE,CAAC;IAChB,CAAC,CAAC,CACDc,KAAK,CAAC,UAACC,KAAK,EAAK;MAChBJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAE5C1B,KAAK,CAACc,KAAK,CAAC,OAAO,EAAE,gDAAgD,CAAC;IACxE,CAAC,CAAC;EACN,CAAC;EAED,OACET,KAAA,CAACR,IAAI;IAAC8B,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,GAC3B1B,IAAA,CAACL,SAAS;MACRgC,KAAK,EAAEpB,OAAQ;MACfqB,YAAY,EAAE,SAAAA,aAACf,IAAI;QAAA,OAAKL,UAAU,CAACK,IAAI,CAAC;MAAA,CAAC;MACzCgB,WAAW,EAAC,sBAAsB;MAClCC,SAAS;MACTN,KAAK,EAAE;QACLO,WAAW,EAAE,CAAC;QACdC,WAAW,EAAE,MAAM;QACnBC,YAAY,EAAE,CAAC;QACfR,OAAO,EAAE,EAAE;QACXS,YAAY,EAAE;MAChB;IAAE,CACH,CAAC,EACFlC,IAAA,CAACJ,MAAM;MAACuC,OAAO,EAAE1B,gBAAiB;MAAC2B,KAAK,EAAC;IAAY,CAAE,CAAC;EAAA,CACpD,CAAC;AAEX,CAAC;AAED,eAAejC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}