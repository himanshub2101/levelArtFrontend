{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThreadsScreen = function ThreadsScreen() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    content = _useState2[0],\n    setContent = _useState2[1];\n  var handlePostSubmit = function handlePostSubmit() {\n    if (!content.trim()) {\n      Alert.alert(\"Error\", \"Content cannot be empty\");\n      return;\n    }\n    var postData = {\n      text: content,\n      postedBy: '6616503a6ef3b88a98a07eb3'\n    };\n    axios.post(\"http://localhost:3000/posts/create-post\", postData).then(function (response) {\n      console.log(\"Post created successfully:\", response.data);\n      setContent(\"\");\n    }).catch(function (error) {\n      console.error(\"Error creating post:\", error);\n      Alert.alert(\"Error\", \"Failed to create post. Please try again later.\");\n    });\n  };\n  return _jsxs(SafeAreaView, {\n    style: {\n      padding: 10\n    },\n    children: [_jsxs(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        padding: 10\n      },\n      children: [_jsx(Image, {\n        style: {\n          width: 40,\n          height: 40,\n          borderRadius: 20,\n          resizeMode: \"contain\"\n        },\n        source: {\n          uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\"\n        }\n      }), _jsx(Text, {\n        children: \"Sujan_Music\"\n      })]\n    }), _jsx(View, {\n      style: {\n        flexDirection: \"row\",\n        marginLeft: 10\n      },\n      children: _jsx(TextInput, {\n        value: content,\n        onChangeText: function onChangeText(text) {\n          return setContent(text);\n        },\n        placeholder: \"Type your message...\",\n        multiline: true,\n        style: {\n          borderWidth: 1,\n          borderColor: \"gray\",\n          borderRadius: 5,\n          padding: 10,\n          marginBottom: 10\n        }\n      })\n    }), _jsx(Button, {\n      onPress: handlePostSubmit,\n      title: \"Share Post\"\n    })]\n  });\n};\nexport default ThreadsScreen;","map":{"version":3,"names":["React","useState","View","TextInput","Button","SafeAreaView","Image","Text","Alert","axios","jsx","_jsx","jsxs","_jsxs","ThreadsScreen","_useState","_useState2","_slicedToArray","content","setContent","handlePostSubmit","trim","alert","postData","text","postedBy","post","then","response","console","log","data","catch","error","style","padding","children","flexDirection","alignItems","width","height","borderRadius","resizeMode","source","uri","marginLeft","value","onChangeText","placeholder","multiline","borderWidth","borderColor","marginBottom","onPress","title"],"sources":["C:/himanshu/threads-app/screens/ThreadsScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, TextInput, Button, SafeAreaView, Image, Text, Alert } from \"react-native\";\r\nimport axios from \"axios\";\r\n\r\nconst ThreadsScreen = () => {\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const handlePostSubmit = () => {\r\n    // Check if content is empty\r\n    if (!content.trim()) {\r\n      Alert.alert(\"Error\", \"Content cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    // Prepare data for the POST request\r\n    const postData = {\r\n      text: content,\r\n      postedBy: '6616503a6ef3b88a98a07eb3', // Replace with the actual user ID\r\n    };\r\n\r\n    // Make the POST request to create a new post\r\n    axios.post(\"http://localhost:3000/posts/create-post\", postData)\r\n      .then((response) => {\r\n        console.log(\"Post created successfully:\", response.data);\r\n        // Optionally, you can show a success message or navigate to another screen\r\n        setContent(\"\"); // Clear the input field after successful post\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error creating post:\", error);\r\n        // Display an error message if the request fails\r\n        Alert.alert(\"Error\", \"Failed to create post. Please try again later.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={{ padding: 10 }}>\r\n      <View style={{ flexDirection: \"row\", alignItems: \"center\", padding: 10 }}>\r\n        <Image\r\n          style={{ width: 40, height: 40, borderRadius: 20, resizeMode: \"contain\" }}\r\n          source={{ uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\" }}\r\n        />\r\n        <Text>Sujan_Music</Text>\r\n      </View>\r\n\r\n      <View style={{ flexDirection: \"row\", marginLeft: 10 }}>\r\n        <TextInput\r\n          value={content}\r\n          onChangeText={(text) => setContent(text)}\r\n          placeholder=\"Type your message...\"\r\n          multiline\r\n          style={{ borderWidth: 1, borderColor: \"gray\", borderRadius: 5, padding: 10, marginBottom: 10 }}\r\n        />\r\n      </View>\r\n\r\n      <Button onPress={handlePostSubmit} title=\"Share Post\" />\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default ThreadsScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,YAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAExC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE1B,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EAC1B,IAAAC,SAAA,GAA8Bd,QAAQ,CAAC,EAAE,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1B,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS;IAE7B,IAAI,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC,EAAE;MACnBb,KAAK,CAACc,KAAK,CAAC,OAAO,EAAE,yBAAyB,CAAC;MAC/C;IACF;IAGA,IAAMC,QAAQ,GAAG;MACfC,IAAI,EAAEN,OAAO;MACbO,QAAQ,EAAE;IACZ,CAAC;IAGDhB,KAAK,CAACiB,IAAI,CAAC,yCAAyC,EAAEH,QAAQ,CAAC,CAC5DI,IAAI,CAAC,UAACC,QAAQ,EAAK;MAClBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,QAAQ,CAACG,IAAI,CAAC;MAExDZ,UAAU,CAAC,EAAE,CAAC;IAChB,CAAC,CAAC,CACDa,KAAK,CAAC,UAACC,KAAK,EAAK;MAChBJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAE5CzB,KAAK,CAACc,KAAK,CAAC,OAAO,EAAE,gDAAgD,CAAC;IACxE,CAAC,CAAC;EACN,CAAC;EAED,OACET,KAAA,CAACR,YAAY;IAAC6B,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,GACnCvB,KAAA,CAACX,IAAI;MAACgC,KAAK,EAAE;QAAEG,aAAa,EAAE,KAAK;QAAEC,UAAU,EAAE,QAAQ;QAAEH,OAAO,EAAE;MAAG,CAAE;MAAAC,QAAA,GACvEzB,IAAA,CAACL,KAAK;QACJ4B,KAAK,EAAE;UAAEK,KAAK,EAAE,EAAE;UAAEC,MAAM,EAAE,EAAE;UAAEC,YAAY,EAAE,EAAE;UAAEC,UAAU,EAAE;QAAU,CAAE;QAC1EC,MAAM,EAAE;UAAEC,GAAG,EAAE;QAAwD;MAAE,CAC1E,CAAC,EACFjC,IAAA,CAACJ,IAAI;QAAA6B,QAAA,EAAC;MAAW,CAAM,CAAC;IAAA,CACpB,CAAC,EAEPzB,IAAA,CAACT,IAAI;MAACgC,KAAK,EAAE;QAAEG,aAAa,EAAE,KAAK;QAAEQ,UAAU,EAAE;MAAG,CAAE;MAAAT,QAAA,EACpDzB,IAAA,CAACR,SAAS;QACR2C,KAAK,EAAE5B,OAAQ;QACf6B,YAAY,EAAE,SAAAA,aAACvB,IAAI;UAAA,OAAKL,UAAU,CAACK,IAAI,CAAC;QAAA,CAAC;QACzCwB,WAAW,EAAC,sBAAsB;QAClCC,SAAS;QACTf,KAAK,EAAE;UAAEgB,WAAW,EAAE,CAAC;UAAEC,WAAW,EAAE,MAAM;UAAEV,YAAY,EAAE,CAAC;UAAEN,OAAO,EAAE,EAAE;UAAEiB,YAAY,EAAE;QAAG;MAAE,CAChG;IAAC,CACE,CAAC,EAEPzC,IAAA,CAACP,MAAM;MAACiD,OAAO,EAAEjC,gBAAiB;MAACkC,KAAK,EAAC;IAAY,CAAE,CAAC;EAAA,CAC5C,CAAC;AAEnB,CAAC;AAED,eAAexC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}