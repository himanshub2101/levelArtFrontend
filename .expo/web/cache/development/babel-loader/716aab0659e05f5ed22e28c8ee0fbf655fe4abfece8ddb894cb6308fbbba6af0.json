{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/VT/Documents/Confidentials/Native Projects/levelArtFrontend/components/User.js"],"sourcesContent":["// import { StyleSheet, Text, View, Image, Pressable } from \"react-native\";\r\n// import React, { useContext, useState,useEffect } from \"react\";\r\n// import { UserType } from \"../UserContext\";\r\n\r\n// const User = ({ item }) => {\r\n//   const { userId, setUserId } = useContext(UserType);\r\n//   console.log(\"sds\",item);\r\n//   const [requestSent, setRequestSent] = useState(false);\r\n//   const sendFollow = async (currentUserId, selectedUserId) => {\r\n//     try {\r\n//       const response = await fetch(\"https://levelartbackend-production.up.railway.app/follow\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ currentUserId, selectedUserId }),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         setRequestSent(true);\r\n//       }\r\n//     } catch (error) {\r\n//       console.log(\"error message\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleUnfollow = async (targetId) => {\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:3000/users/unfollow\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({\r\n//           loggedInUserId: userId,\r\n//           targetUserId: targetId,\r\n//         }),\r\n//       });\r\n\r\n//       if(response.ok){\r\n//           setRequestSent(false);\r\n//           console.log(\"unfollowed successfully\")\r\n//       }\r\n//     } catch (error) {\r\n//       console.log(\"Error\", error);\r\n//     }\r\n//   };\r\n//   useEffect(() => {\r\n//     // Reset the requestSent state whenever the userId or item prop changes\r\n//     setRequestSent(false);\r\n//   }, [userId, item]);\r\n//   return (\r\n//     <View>\r\n//       <View style={{ flexDirection: \"row\", alignItems: \"center\", gap: 10 }}>\r\n//         <Image\r\n//           style={{\r\n//             width: 40,\r\n//             height: 40,\r\n//             borderRadius: 20,\r\n//             resizeMode: \"contain\",\r\n//           }}\r\n//           source={{\r\n//             uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\",\r\n//           }}\r\n//         />\r\n\r\n//         <Text style={{ fontSize: 15, fontWeight: \"500\", flex: 1 }}>\r\n//           {item?.name}\r\n//         </Text>\r\n\r\n//         {requestSent || item?.followers?.includes(userId) ? (\r\n//           <Pressable\r\n//             onPress={() => handleUnfollow(item?._id)}\r\n//             style={{\r\n//               borderColor: \"#D0D0D0\",\r\n//               borderWidth: 1,\r\n//               padding: 10,\r\n//               marginLeft: 10,\r\n//               width: 100,\r\n//               borderRadius: 8,\r\n//             }}\r\n//           >\r\n//             <Text\r\n//               style={{ textAlign: \"center\", fontSize: 15, fontWeight: \"bold\" }}\r\n//             >\r\n//               Following\r\n//             </Text>\r\n//           </Pressable>\r\n//         ) : (\r\n//           <Pressable\r\n//             onPress={() => sendFollow(userId, item._id)}\r\n//             style={{\r\n//               borderColor: \"#D0D0D0\",\r\n//               borderWidth: 1,\r\n//               padding: 10,\r\n//               marginLeft: 10,\r\n//               width: 100,\r\n//               borderRadius: 8,\r\n//             }}\r\n//           >\r\n//             <Text\r\n//               style={{ textAlign: \"center\", fontSize: 15, fontWeight: \"bold\" }}\r\n//             >\r\n//               Follow\r\n//             </Text>\r\n//           </Pressable>\r\n//         )}\r\n//       </View>\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default User;\r\n\r\n// const styles = StyleSheet.create({});\r\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}