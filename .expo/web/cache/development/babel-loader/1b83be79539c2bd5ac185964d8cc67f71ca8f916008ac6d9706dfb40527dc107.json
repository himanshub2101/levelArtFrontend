{"ast":null,"code":"import React from 'react';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport ForYouScreen from \"./ForYouScreen\";\nimport FollowingScreen from \"./FollowingScreen\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createMaterialTopTabNavigator();\nvar HomeScreen = function HomeScreen() {\n  return _jsxs(Tab.Navigator, {\n    children: [_jsx(Tab.Screen, {\n      name: \"For You\",\n      component: ForYouScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Following\",\n      component: FollowingScreen\n    })]\n  });\n};\nexport default HomeScreen;","map":{"version":3,"names":["React","createMaterialTopTabNavigator","ForYouScreen","FollowingScreen","jsx","_jsx","jsxs","_jsxs","Tab","HomeScreen","Navigator","children","Screen","name","component"],"sources":["C:/Users/DELL/Documents/Confidentials/levelArtFrontend/screens/HomeScreen.js"],"sourcesContent":["// import React, { useEffect, useContext, useState, useCallback } from \"react\";\r\n// import { StyleSheet, Text, View, ScrollView, Image, RefreshControl, TouchableOpacity, Modal, Alert, TextInput, Dimensions } from \"react-native\";\r\n// import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n// import jwt_decode from \"jwt-decode\";\r\n// import axios from \"axios\";\r\n// import { AntDesign, FontAwesome, Ionicons } from \"@expo/vector-icons\";\r\n// import logo from '../assets/logo.png';\r\n// import { UserType } from \"../UserContext\";\r\n// import MessageContainer from \"../components/messageContainer\"; // Import MessageContainer component\r\n// // Import the necessary icon\r\n// import { Feather } from \"@expo/vector-icons\";\r\n\r\n// const HomeScreen = ({ route }) => {\r\n//   const { userId, setUserId } = useContext(UserType);\r\n//   const [posts, setPosts] = useState([]);\r\n//   const [refreshing, setRefreshing] = useState(false);\r\n//   const [userIdSet, setUserIdSet] = useState(false);\r\n//   const [showChat, setShowChat] = useState(false); // State to manage chat screen visibility\r\n//   const [selectedPost, setSelectedPost] = useState(null); // State to store the selected post\r\n//   const [modalVisible, setModalVisible] = useState(false); // State to manage the modal visibility\r\n//   const [showCommentInput, setShowCommentInput] = useState(false); // State to manage comment input visibility\r\n//   const [commentText, setCommentText] = useState(''); // State to store the comment text\r\n//   const [savedPosts, setSavedPosts] = useState([]); // State to store saved posts\r\n\r\n//   useEffect(() => {\r\n//     const fetchUserData = async () => {\r\n//       try {\r\n//         const token = await AsyncStorage.getItem(\"authToken\");\r\n//         if (!token) {\r\n//           console.log(\"Token not found\");\r\n//           return;\r\n//         }\r\n//         const decodedToken = jwt_decode(token);\r\n//         if (!decodedToken || !decodedToken.sub) {\r\n//           console.log(\"Decoded token or user ID not found\");\r\n//           return;\r\n//         }\r\n//         const userId = decodedToken.sub;\r\n//         setUserId(userId);\r\n//         setUserIdSet(true);\r\n//         fetchPosts(); // Fetch posts whenever userId changes\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching user data:\", error);\r\n//       }\r\n//     };\r\n//     fetchUserData();\r\n//   }, [route]);\r\n\r\n//   useEffect(() => {\r\n//     if (userIdSet) {\r\n//       fetchPosts();\r\n//     }\r\n//   }, [userIdSet]);\r\n\r\n//   useEffect(() => {\r\n//     // fetchSavedPosts();\r\n//   }, []);\r\n\r\n//   const onRefresh = useCallback(() => {\r\n//     setRefreshing(true);\r\n//     fetchPosts();\r\n//     setRefreshing(false);\r\n//   }, []);\r\n\r\n//   const fetchPosts = async () => {\r\n//     try {\r\n//       const token = await AsyncStorage.getItem(\"authToken\");\r\n//       const decodedToken = jwt_decode(token);\r\n//       const headers = {\r\n//         Authorization: `Bearer ${token}`,\r\n//         \"Content-Type\": \"application/json\",\r\n//       };\r\n\r\n//       const responseFollowings = await axios.get(`https://levelart.up.railway.app/followers/${userId}/following`, { headers });\r\n//       const followings = responseFollowings.data;\r\n//       const postsPromises = followings.map(async (followingId) => {\r\n//         const response = await axios.get(`https://levelart.up.railway.app/user/${followingId}`, { headers });\r\n//         return response.data;\r\n//       });\r\n\r\n//       const responseUserPosts = await axios.get(`https://levelart.up.railway.app/posts/user/${userId}`, { headers });\r\n//       const userPosts = responseUserPosts.data;\r\n//       const postsResponses = await Promise.all(postsPromises);\r\n\r\n//       const allPosts = postsResponses.reduce((accumulator, currentPosts) => accumulator.concat(currentPosts), []);\r\n\r\n//       const combinedPosts = [...allPosts, ...userPosts].map(post => ({ ...post, liked: post.likes.includes(userId) }));\r\n//       setPosts(combinedPosts);\r\n//     } catch (error) {\r\n//       console.log(\"Error fetching posts\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleLike = async (postId) => {\r\n//     try {\r\n//       const token = await AsyncStorage.getItem(\"authToken\");\r\n//       const response = await axios.post(`https://levelart.up.railway.app/posts/${postId}/like`, null, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//         },\r\n//       });\r\n//       setPosts(prevPosts =>\r\n//         prevPosts.map(post =>\r\n//           post._id === postId ? { ...post, liked: !post.liked, likes: post.liked ? post.likes.filter(id => id !== userId) : [...post.likes, userId] } : post\r\n//         )\r\n//       );\r\n//       console.log(\"Post liked/unliked successfully:\", response.data.message);\r\n//     } catch (error) {\r\n//       console.error(\"Error liking the post\", error);\r\n//     }\r\n//   };\r\n\r\n//   const openOptionsModal = (post) => {\r\n//     setSelectedPost(post);\r\n//     setModalVisible(true);\r\n//   };\r\n\r\n//   const closeOptionsModal = () => {\r\n//     setSelectedPost(null);\r\n//     setModalVisible(false);\r\n//   };\r\n\r\n//   const toggleCommentInput = () => {\r\n//     setShowCommentInput(!showCommentInput);\r\n//   };\r\n\r\n//   const handleComment = async (postId) => {\r\n//     try {\r\n//       console.log(\"Comment:\", commentText);\r\n//       setCommentText('');\r\n//       setShowCommentInput(false);\r\n//     } catch (error) {\r\n//       console.error(\"Error posting the comment\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleSavePost = async (postId) => {\r\n//     try {\r\n//       const isSaved = savedPosts.includes(postId);\r\n//       const updatedSavedPosts = isSaved\r\n//         ? savedPosts.filter((savedPostId) => savedPostId !== postId)\r\n//         : [...savedPosts, postId];\r\n//       setSavedPosts(updatedSavedPosts);\r\n//       await AsyncStorage.setItem(\"savedPosts\", JSON.stringify(updatedSavedPosts));\r\n//     } catch (error) {\r\n//       console.error(\"Error saving post:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const renderPost = (post) => {\r\n//     return (\r\n//       <View key={`${post.postedBy}-${post.postId}`} style={styles.post}>\r\n//         <View style={styles.postHeader}>\r\n//           <Text style={styles.username}>{post.postedBy}</Text>\r\n//         </View>\r\n//         <View style={styles.postContent}>\r\n//           <Text>{post.text}</Text>\r\n//           {post.img && (\r\n//             <Image source={{ uri: post.img }} style={styles.postImage} />\r\n//           )}\r\n//           <View style={styles.actionButtons}>\r\n//             <TouchableOpacity onPress={() => handleLike(post._id)} style={styles.actionButton}>\r\n//               <AntDesign name={post.liked ? \"heart\" : \"hearto\"} size={30} color={post.liked ? \"red\" : \"black\"} />\r\n//             </TouchableOpacity>\r\n//             <TouchableOpacity onPress={toggleCommentInput} style={styles.actionButton}>\r\n//               <FontAwesome name=\"comment-o\" size={30} color=\"black\" />\r\n//             </TouchableOpacity>\r\n//             <TouchableOpacity onPress={() => handleShare(post._id)} style={styles.actionButton}>\r\n//               <Ionicons name=\"share-social\" size={30} color=\"black\" />\r\n//             </TouchableOpacity>\r\n//             <TouchableOpacity onPress={() => handleSavePost(post._id)} style={styles.saveButton}>\r\n//               <Feather name={savedPosts.includes(post._id) ? \"bookmark\" : \"bookmark-outline\"} size={30} color={savedPosts.includes(post._id) ? \"#000\" : \"#8e8e8e\"} />\r\n//             </TouchableOpacity>\r\n//           </View>\r\n//         </View>\r\n//       </View>\r\n//     );\r\n//   };\r\n  \r\n  \r\n\r\n//   return (\r\n//     <ScrollView\r\n//       style={styles.container}\r\n//       refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\r\n//     >\r\n//               <Image style={styles.logo} source={logo} />\r\n//               <TouchableOpacity style={styles.chatIconContainer} onPress={() => setShowChat(!showChat)}>\r\n//           <Ionicons name=\"chatbubble-outline\" size={24} color=\"black\" />\r\n//         </TouchableOpacity>\r\n//       <View style={styles.header}>\r\n       \r\n\r\n//         <TouchableOpacity style={styles.sidebarButton} onPress={() => console.log(\"Following pressed\")}>\r\n         \r\n//           <Text style={styles.sidebarButtonText}>Following</Text>\r\n//         </TouchableOpacity>\r\n//         <TouchableOpacity style={styles.sidebarButton} onPress={() => console.log(\"You pressed\")}>\r\n//           <Text style={styles.sidebarButtonText}>You</Text>\r\n//         </TouchableOpacity>\r\n        \r\n//       </View>\r\n//       <View style={styles.postContainer}>\r\n//         {posts.map((post) => renderPost(post))}\r\n//       </View>\r\n//       <Modal\r\n//         animationType=\"slide\"\r\n//         transparent={true}\r\n//         visible={modalVisible}\r\n//         onRequestClose={closeOptionsModal}\r\n//       >\r\n//         <View style={styles.modalContainer}>\r\n//           <View style={styles.modalContent}>\r\n//             <TouchableOpacity onPress={closeOptionsModal}>\r\n//               <Text style={styles.closeModalText}>Close</Text>\r\n//             </TouchableOpacity>\r\n//             <TouchableOpacity onPress={() => {}}>\r\n//               <Text>saved</Text>\r\n//             </TouchableOpacity>\r\n//             <TouchableOpacity onPress={() => {}}>\r\n//               <Text>Share</Text>\r\n//             </TouchableOpacity>\r\n//             <TouchableOpacity onPress={() => {}}>\r\n//               <Text>Unfollow</Text>\r\n//             </TouchableOpacity>\r\n//             <TouchableOpacity onPress={() => {}}>\r\n//               <Text>handleImagePicker</Text>\r\n//             </TouchableOpacity>\r\n//             <TouchableOpacity onPress={() => {}}>\r\n//               <Text>About this account</Text>\r\n//             </TouchableOpacity>\r\n//           </View>\r\n//         </View>\r\n//       </Modal>\r\n//       {showChat && <MessageContainer />}\r\n//     </ScrollView>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     backgroundColor: \"white\",\r\n//   },\r\n//   header: {\r\n//     flexDirection: \"row\",\r\n//     alignItems: \"center\",\r\n//     justifyContent: \"space-between\",\r\n//     marginTop: 0,\r\n//     marginBottom: 0,\r\n//     borderBottomWidth: 1,\r\n//     borderBottomColor: \"#ddd\",\r\n//     paddingHorizontal: 20,\r\n//   },\r\n//   logo: {\r\n//     width: 80,\r\n//     height: 60,\r\n//     top: 10,\r\n//     right: 0,\r\n//      resizeMode: \"contain\",\r\n   \r\n//   },\r\n//   sidebarButton: {\r\n//     paddingHorizontal: 50,\r\n//     paddingVertical: 10,\r\n//     borderRadius: 5,\r\n//   },\r\n//   sidebarButtonText: {\r\n//     color: \"black\",\r\n//   },\r\n//   chatIconContainer: {\r\n//     position: \"absolute\",\r\n//     top: 20,\r\n//     right: 10,\r\n//   },\r\n  \r\n//   postContainer: {\r\n//     paddingHorizontal: 5,\r\n//   },\r\n//   post: {\r\n//     backgroundColor: \"#fff\",\r\n//     borderRadius: 10,\r\n//     marginBottom: 20,\r\n//     borderWidth: 1,\r\n//     borderColor: \"#ddd\",\r\n//   },\r\n//   postHeader: {\r\n//     flexDirection: \"row\",\r\n//     justifyContent: \"space-between\",\r\n//     alignItems: \"center\",\r\n//     paddingHorizontal: 10,\r\n//     paddingVertical: 8,\r\n//   },\r\n//   profilePicture: {\r\n//     width: 40,\r\n//     height: 10,\r\n//     borderRadius: 20,\r\n//     marginRight: 10,\r\n//   },\r\n//   username: {\r\n//     fontWeight: \"bold\",\r\n//   },\r\n//   postContent: {\r\n//     minHeight: 100,\r\n//     paddingVertical: 10,\r\n//   },\r\n//   postImage: {\r\n//     width: \"100%\",\r\n//     height: 550,\r\n//   },\r\n//   actionButtons: {\r\n//     flexDirection: \"row\",\r\n//     paddingHorizontal: 5,\r\n//     paddingVertical: 10,\r\n//     borderTopWidth: 1,\r\n//     borderColor: \"#ddd\",\r\n//   },\r\n//   actionButton: {\r\n//     marginHorizontal: 5,\r\n//   },\r\n//   likes: {\r\n//     fontWeight: \"bold\",\r\n//     paddingHorizontal: 10,\r\n//     marginBottom: 5,\r\n//   },\r\n//   modalContainer: {\r\n//     flex: 1,\r\n//     justifyContent: \"center\",\r\n//     alignItems: \"center\",\r\n//     backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n//   },\r\n//   modalContent: {\r\n//     backgroundColor: \"white\",\r\n//     padding: 20,\r\n//     borderRadius: 10,\r\n//     elevation: 5,\r\n//   },\r\n//   closeModalText: {\r\n//     alignSelf: \"flex-end\",\r\n//     marginBottom: 10,\r\n//   },\r\n//   commentInputContainer: {\r\n//     flexDirection: \"row\",\r\n//     alignItems: \"center\",\r\n//     marginTop: 10,\r\n//     paddingHorizontal: 10,\r\n//   },\r\n//   commentInput: {\r\n//     flex: 1,\r\n//     height: 40,\r\n//     borderWidth: 1,\r\n//     borderColor: \"#ddd\",\r\n//     borderRadius: 5,\r\n//     paddingHorizontal: 10,\r\n//   },\r\n//   postCommentButton: {\r\n//     marginLeft: 10,\r\n//     paddingVertical: 8,\r\n//     paddingHorizontal: 12,\r\n//     backgroundColor: \"#007AFF\",\r\n//     borderRadius: 5,\r\n//   },\r\n//   postCommentButtonText: {\r\n//     color: \"#fff\",\r\n//   },\r\n// });\r\n\r\n// export default HomeScreen;\r\n\r\n\r\nimport React from 'react';\r\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\r\nimport ForYouScreen from './ForYouScreen';\r\nimport FollowingScreen from './FollowingScreen';\r\n\r\nconst Tab = createMaterialTopTabNavigator();\r\n\r\nconst HomeScreen = () => {\r\n  return (\r\n    <Tab.Navigator>\r\n      <Tab.Screen name=\"For You\" component={ForYouScreen} />\r\n      <Tab.Screen name=\"Following\" component={FollowingScreen} />\r\n    </Tab.Navigator>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n"],"mappings":"AAkXA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,6BAA6B,QAAQ,qCAAqC;AACnF,OAAOC,YAAY;AACnB,OAAOC,eAAe;AAA0B,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAEhD,IAAMC,GAAG,GAAGP,6BAA6B,CAAC,CAAC;AAE3C,IAAMQ,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;EACvB,OACEF,KAAA,CAACC,GAAG,CAACE,SAAS;IAAAC,QAAA,GACZN,IAAA,CAACG,GAAG,CAACI,MAAM;MAACC,IAAI,EAAC,SAAS;MAACC,SAAS,EAAEZ;IAAa,CAAE,CAAC,EACtDG,IAAA,CAACG,GAAG,CAACI,MAAM;MAACC,IAAI,EAAC,WAAW;MAACC,SAAS,EAAEX;IAAgB,CAAE,CAAC;EAAA,CAC9C,CAAC;AAEpB,CAAC;AAED,eAAeM,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}