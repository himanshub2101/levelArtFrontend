{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/DELL/Documents/Confidentials/levelArtFrontend/screens/ImagesScreen.js"],"sourcesContent":["// import React, { useEffect, useState, useContext } from \"react\";\r\n// import { StyleSheet, Text, View, Image, Pressable, FlatList, ScrollView, Dimensions,StyleSheet } from \"react-native\";\r\n// // import axios from \"axios\";\r\n// // import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n// // import { useNavigation } from \"@react-navigation/native\";\r\n// // import { UserType } from '../UserContext';\r\n// // import Icon from 'react-native-vector-icons/Ionicons';\r\n// // import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\r\n\r\n// // const Tab = createMaterialTopTabNavigator();\r\n\r\n// // const TweetsScreen \r\n\r\n// // const ImagesScreen = ({ posts }) => {\r\n// //   const renderPostItem = ({ item }) => (\r\n// //     <View style={styles.postWrapper}>\r\n// //       <Image\r\n// //         style={styles.postImage}\r\n// //         source={{\r\n// //           uri: item.img || \"https://via.placeholder.com/150\",\r\n// //         }}\r\n// //       />\r\n// //     </View>\r\n// //   );\r\n\r\n// //   return (\r\n// //     <View style={styles.container}>\r\n// //       <FlatList\r\n// //         data={posts}\r\n// //         renderItem={renderPostItem}\r\n// //         keyExtractor={(item) => item._id}\r\n// //         contentContainerStyle={styles.postsList}\r\n// //         numColumns={3} // Adjust the number of columns\r\n// //       />\r\n// //     </View>\r\n// //   );\r\n// // };\r\n\r\n// // const ProfileScreen = () => {\r\n// //   const [user, setUser] = useState(\"\");\r\n// //   const [followers, setFollowers] = useState(0);\r\n// //   const [followings, setFollowings] = useState(0);\r\n// //   const [posts, setPosts] = useState([]);\r\n// //   const [replies, setReplies] = useState([]);\r\n// //   const navigation = useNavigation();\r\n// //   const { userId, setUserId } = useContext(UserType);\r\n\r\n// //   useEffect(() => {\r\n// //     const fetchProfile = async (userId) => {\r\n// //       try {\r\n// //         // Get the authentication token from AsyncStorage\r\n// //         const authToken = await AsyncStorage.getItem(\"authToken\");\r\n// //         console.log(\"Auth Token From Profile:\", authToken);\r\n\r\n// //         // Make a GET request to fetch profile information\r\n// //         const profileResponse = await axios.get(\r\n// //           `https://levelart.up.railway.app/followers/${userId}/followers`,\r\n// //           {\r\n// //             headers: {\r\n// //               Authorization: `Bearer ${authToken}`,\r\n// //             },\r\n// //           }\r\n// //         );\r\n\r\n// //         const { user, followers, followings } = profileResponse.data;\r\n// //         setUser(user);\r\n// //         setFollowers(followers?.length || 0);\r\n// //         setFollowings(followings?.length || 0);\r\n\r\n// //         // Fetch user posts\r\n// //         const postsResponse = await axios.get(\r\n// //           `https://levelart.up.railway.app/posts/user/${userId}`,\r\n// //           {\r\n// //             headers: {\r\n// //               Authorization: `Bearer ${authToken}`,\r\n// //             },\r\n// //           }\r\n// //         );\r\n// //         setPosts(postsResponse.data);\r\n\r\n// //         // Fetch user replies\r\n// //         const repliesResponse = await axios.get(\r\n// //           `https://levelart.up.railway.app/posts/user/${userId}/replies`,\r\n// //           {\r\n// //             headers: {\r\n// //               Authorization: `Bearer ${authToken}`,\r\n// //             },\r\n// //           }\r\n// //         );\r\n// //         setReplies(repliesResponse.data);\r\n// //       } catch (error) {\r\n// //         console.error(\"Error fetching profile:\", error);\r\n// //       }\r\n// //     };\r\n\r\n// //     if (userId) {\r\n// //       fetchProfile(userId);\r\n// //     } else {\r\n// //       console.log(\"userId is undefined\");\r\n// //     }\r\n// //   }, [userId]);\r\n\r\n// //   const logout = async () => {\r\n// //     try {\r\n// //       await AsyncStorage.removeItem(\"authToken\");\r\n// //       console.log(\"Cleared auth token\");\r\n// //       navigation.replace(\"Login\");\r\n// //     } catch (error) {\r\n// //       console.error(\"Error clearing auth token:\", error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleSettingsPress = () => {\r\n// //     navigation.navigate('Settings');\r\n// //   };\r\n\r\n// //   return (\r\n// //     <View style={styles.container}>\r\n// //       <View style={styles.profileInfo}>\r\n// //         <View style={styles.profileHeader}>\r\n// //           <Text style={styles.username}>{user}</Text>\r\n// //           <Pressable style={styles.settingsIcon} onPress={handleSettingsPress}>\r\n// //             <Icon name=\"settings-outline\" size={30} color=\"#333\" />\r\n// //           </Pressable>\r\n// //         </View>\r\n// //         <View style={styles.bioContainer}>\r\n// //           <Image\r\n// //             style={styles.profileImage}\r\n// //             source={{\r\n// //               uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\",\r\n// //             }}\r\n// //           />\r\n// //           <View style={styles.bioTextContainer}>\r\n// //             <Text style={styles.bioText}>BTech.</Text>\r\n// //             <Text style={styles.bioText}>Movie Buff | Musical Nerd</Text>\r\n// //             <Text style={styles.bioText}>Love Yourself</Text>\r\n// //           </View>\r\n// //         </View>\r\n// //         <Text style={styles.followText}>{followers} followers</Text>\r\n// //         <Text style={styles.followText}>{followings} followings</Text>\r\n// //       </View>\r\n\r\n// //       <Tab.Navigator>\r\n// //         <Tab.Screen name=\"Images\">\r\n// //           {() => <ImagesScreen posts={posts} />}\r\n// //         </Tab.Screen>\r\n// //         <Tab.Screen name=\"Tweets\">\r\n// //           {() => <TweetsScreen posts={posts} />}\r\n// //         </Tab.Screen>\r\n// //       </Tab.Navigator>\r\n\r\n// //       <View style={styles.buttonsContainer}>\r\n// //         <Pressable style={styles.button} onPress={logout}>\r\n// //           <Text style={styles.buttonText}>Logout</Text>\r\n// //         </Pressable>\r\n// //       </View>\r\n// //     </View>\r\n// //   );\r\n// // };\r\n\r\n// // const styles = StyleSheet.create({\r\n// //   container: {\r\n// //     flex: 1,\r\n// //   },\r\n// //   profileInfo: {\r\n// //     marginBottom: 20,\r\n// //     padding: 15,\r\n// //   },\r\n// //   profileHeader: {\r\n// //     flexDirection: \"row\",\r\n// //     alignItems: \"center\",\r\n// //     marginBottom: 10,\r\n// //   },\r\n// //   username: {\r\n// //     fontSize: 20,\r\n// //     fontWeight: \"bold\",\r\n// //   },\r\n// //   bioContainer: {\r\n// //     flexDirection: \"row\",\r\n// //     alignItems: \"center\",\r\n// //     marginBottom: 10,\r\n// //   },\r\n// //   profileImage: {\r\n// //     width: 100,\r\n// //     height: 100,\r\n// //     borderRadius: 50,\r\n// //     resizeMode: \"cover\",\r\n// //   },\r\n// //   bioTextContainer: {\r\n// //     marginLeft: 10,\r\n// //   },\r\n// //   bioText: {\r\n// //     fontSize: 15,\r\n// //     fontWeight: \"400\",\r\n// //   },\r\n// //   followText: {\r\n// //     color: \"gray\",\r\n// //     fontSize: 15,\r\n// //   },\r\n// //   postsList: {\r\n// //     flexGrow: 1,\r\n// //     padding: 15,\r\n// //   },\r\n// //   postWrapper: {\r\n// //     flex:1,\r\n// //     flexDirection: 'grid',\r\n// //     justifyContent: 'space-between',\r\n// //     marginBottom: 50,\r\n// //     alignItems: \"left\", // Center the items in the grid\r\n// //   },\r\n// //   postText: {\r\n// //     fontSize: 16,\r\n// //     textAlign: \"center\", // Center the text\r\n// //   },\r\n// //   postImage: {\r\n// //     width: Dimensions.get(\"window\").width / 4, // Adjust according to your layout\r\n// //     height: Dimensions.get(\"window\").width / 4, // Adjust according to your layout\r\n// //     resizeMode: \"cover\",\r\n// //   },\r\n// //   buttonsContainer: {\r\n// //     flexDirection: \"row\",\r\n// //     alignItems: \"center\",\r\n// //     justifyContent: \"center\",\r\n// //     marginTop: 10,\r\n// //     paddingBottom: 10,\r\n// //     padding: 50,\r\n// //   },\r\n// //   button: {\r\n// //     flex: 1,\r\n// //     justifyContent: \"center\",\r\n// //     alignItems: \"center\",\r\n// //     padding: 10,\r\n// //     borderWidth: 1,\r\n// //     borderRadius: 1,\r\n// //     backgroundColor:\"black\",\r\n// //   },\r\n// //   buttonText: {\r\n// //     textAlign: \"center\",\r\n// //     fontWeight: \"bold\",\r\n// //     color:\"white\",\r\n// //   },\r\n// //   settingsIcon: {\r\n// //     marginLeft: 'auto',\r\n// //   },\r\n// // });\r\n\r\n// // export default ProfileScreen;\r\n// const ImagesScreen = ({ posts }) => {\r\n//     const renderPostItem = ({ item }) => (\r\n//       <View style={styles.postWrapper}>\r\n//         <Image\r\n//           style={styles.postImage}\r\n//           source={{\r\n//             uri: item.img || \"https://via.placeholder.com/150\",\r\n//           }}\r\n//         />\r\n//       </View>\r\n//     );\r\n  \r\n//     return (\r\n//       <View style={styles.container}>\r\n//         <FlatList\r\n//           data={posts}\r\n//           renderItem={renderPostItem}\r\n//           keyExtractor={(item) => item._id}\r\n//           contentContainerStyle={styles.postsList}\r\n//           numColumns={3} // Adjust the number of columns\r\n//         />\r\n//       </View>\r\n//     );\r\n//   };\r\n\r\n//   export default ImagesScreen"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}