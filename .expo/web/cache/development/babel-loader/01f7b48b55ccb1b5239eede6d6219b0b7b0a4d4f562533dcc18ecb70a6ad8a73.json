{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useContext } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { UserType } from \"../UserContext\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThreadsScreen = function ThreadsScreen() {\n  var _useContext = useContext(UserType),\n    userId = _useContext.userId;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    content = _useState2[0],\n    setContent = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    username = _useState4[0],\n    setUsername = _useState4[1];\n  useEffect(function () {\n    axios.get(`http://localhost:3000/users/${userId}`).then(function (response) {\n      setUsername(response.data.username);\n    }).catch(function (error) {\n      console.error(\"Error fetching username:\", error);\n    });\n  }, [userId]);\n  var handlePostSubmit = function handlePostSubmit() {\n    var postData = {\n      userId: userId,\n      content: content\n    };\n    axios.post(\"http://localhost:3000/posts/create-post\", postData).then(function (response) {\n      setContent(\"\");\n    }).catch(function (error) {\n      console.error(\"Error creating post:\", error);\n    });\n  };\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.userInfo,\n      children: [_jsx(Image, {\n        style: styles.userAvatar,\n        source: {\n          uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\"\n        }\n      }), _jsx(Text, {\n        children: username\n      })]\n    }), _jsx(View, {\n      style: styles.inputContainer,\n      children: _jsx(TextInput, {\n        value: content,\n        onChangeText: function onChangeText(text) {\n          return setContent(text);\n        },\n        placeholder: \"Type your message...\",\n        placeholderTextColor: \"black\",\n        multiline: true,\n        style: styles.input\n      })\n    }), _jsx(Button, {\n      onPress: handlePostSubmit,\n      title: \"Share Post\"\n    })]\n  });\n};\nexport default ThreadsScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useState","useContext","View","TextInput","Button","SafeAreaView","Image","Text","StyleSheet","UserType","axios","jsx","_jsx","jsxs","_jsxs","ThreadsScreen","_useContext","userId","_useState","_useState2","_slicedToArray","content","setContent","_useState3","_useState4","username","setUsername","useEffect","get","then","response","data","catch","error","console","handlePostSubmit","postData","post","style","styles","container","children","userInfo","userAvatar","source","uri","inputContainer","value","onChangeText","text","placeholder","placeholderTextColor","multiline","input","onPress","title","create"],"sources":["C:/himanshu/threads-app/screens/ThreadsScreen.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { View, TextInput, Button, SafeAreaView, Image, Text, StyleSheet } from \"react-native\";\r\nimport { UserType } from \"../UserContext\";\r\nimport axios from \"axios\";\r\n\r\nconst ThreadsScreen = () => {\r\n  const { userId } = useContext(UserType);\r\n  const [content, setContent] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n\r\n  // Fetch username once when the component mounts\r\n  useEffect(() => {\r\n    // Fetch username based on userId\r\n    axios.get(`http://localhost:3000/users/${userId}`)\r\n      .then((response) => {\r\n        setUsername(response.data.username);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching username:\", error);\r\n      });\r\n  }, [userId]);\r\n\r\n  const handlePostSubmit = () => {\r\n    const postData = {\r\n      userId,\r\n      content,\r\n    };\r\n\r\n    axios.post(\"http://localhost:3000/posts/create-post\", postData)\r\n      .then((response) => {\r\n        setContent(\"\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error creating post:\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.userInfo}>\r\n        <Image\r\n          style={styles.userAvatar}\r\n          source={{\r\n            uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\",\r\n          }}\r\n        />\r\n        <Text>{username}</Text>\r\n      </View>\r\n\r\n      <View style={styles.inputContainer}>\r\n        <TextInput\r\n          value={content}\r\n          onChangeText={(text) => setContent(text)}\r\n          placeholder=\"Type your message...\"\r\n          placeholderTextColor=\"black\"\r\n          multiline\r\n          style={styles.input}\r\n        />\r\n      </View>\r\n\r\n      <Button onPress={handlePostSubmit} title=\"Share Post\" />\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\n\r\nexport default ThreadsScreen;\r\nconst styles = StyleSheet.create({});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}