{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useState, useContext } from \"react\";\nimport { UserType } from \"../UserContext\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThreadsScreen = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var U = yield AsyncStorage.getItem(\"userId\");\n    var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      content = _useState2[0],\n      setContent = _useState2[1];\n    var handlePostSubmit = function handlePostSubmit() {\n      console.log(\"userId:\", userId);\n      if (!userId || !content) {\n        console.log(\"Postedby and text fields are required\");\n        return;\n      }\n      var postData = {\n        userId: userId,\n        content: content\n      };\n      axios.post(\"http://localhost:3000/posts/create-post\", postData).then(function (response) {\n        setContent(\"\");\n      }).catch(function (error) {\n        console.log(\"error creating post\", error);\n      });\n    };\n    return _jsxs(SafeAreaView, {\n      style: {\n        padding: 10\n      },\n      children: [_jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          gap: 10,\n          padding: 10\n        },\n        children: [_jsx(Image, {\n          style: {\n            width: 40,\n            height: 40,\n            borderRadius: 20,\n            resizeMode: \"contain\"\n          },\n          source: {\n            uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\"\n          }\n        }), _jsx(Text, {\n          children: \"Sujan_Music\"\n        })]\n      }), _jsx(View, {\n        style: {\n          flexDirection: \"row\",\n          marginLeft: 10\n        },\n        children: _jsx(TextInput, {\n          value: content,\n          onChangeText: function onChangeText(text) {\n            return setContent(text);\n          },\n          placeholderTextColor: \"black\",\n          placeholder: \"Type your message...\",\n          multiline: true\n        })\n      }), _jsx(View, {\n        style: {\n          marginTop: 20\n        }\n      }), _jsx(Button, {\n        onPress: handlePostSubmit,\n        title: \"Share Post\"\n      })]\n    });\n  });\n  return function ThreadsScreen() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default ThreadsScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useState","useContext","UserType","axios","jsx","_jsx","jsxs","_jsxs","ThreadsScreen","_ref","_asyncToGenerator","U","AsyncStorage","getItem","_useState","_useState2","_slicedToArray","content","setContent","handlePostSubmit","console","log","userId","postData","post","then","response","catch","error","SafeAreaView","style","padding","children","View","flexDirection","alignItems","gap","Image","width","height","borderRadius","resizeMode","source","uri","Text","marginLeft","TextInput","value","onChangeText","text","placeholderTextColor","placeholder","multiline","marginTop","Button","onPress","title","apply","arguments","styles","StyleSheet","create"],"sources":["C:/himanshu/threads-app/screens/ThreadsScreen.js"],"sourcesContent":["import {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Image,\r\n  SafeAreaView,\r\n  TextInput,\r\n  Button,\r\n} from \"react-native\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { UserType } from \"../UserContext\";\r\nimport axios from \"axios\";\r\n\r\nconst ThreadsScreen = async() => {\r\n\r\n  const U = await AsyncStorage.getItem(\"userId\");\r\n  const [content, setContent] = useState(\"\");\r\n  const handlePostSubmit = () => {\r\n    console.log(\"userId:\", userId); // Log userId before making the API call\r\n    if (!userId || !content) {\r\n      console.log(\"Postedby and text fields are required\");\r\n      return;\r\n    }\r\n  \r\n    const postData = {\r\n      userId,\r\n      content,\r\n    };\r\n  \r\n    axios.post(\"http://localhost:3000/posts/create-post\", postData)\r\n      .then((response) => {\r\n        setContent(\"\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error creating post\", error);\r\n      });\r\n  };\r\n  \r\n  return (\r\n    <SafeAreaView style={{ padding: 10 }}>\r\n      <View\r\n        style={{\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          gap: 10,\r\n          padding: 10,\r\n        }}\r\n      >\r\n        <Image\r\n          style={{\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 20,\r\n            resizeMode: \"contain\",\r\n          }}\r\n          source={{\r\n            uri: \"https://cdn-icons-png.flaticon.com/128/149/149071.png\",\r\n          }}\r\n        />\r\n\r\n        <Text>Sujan_Music</Text>\r\n      </View>\r\n\r\n      <View style={{ flexDirection: \"row\", marginLeft: 10 }}>\r\n        <TextInput\r\n          value={content}\r\n          onChangeText={(text) => setContent(text)}\r\n          placeholderTextColor={\"black\"}\r\n          placeholder=\"Type your message...\"\r\n          multiline\r\n        />\r\n      </View>\r\n\r\n      <View style={{ marginTop: 20 }} />\r\n\r\n      <Button onPress={handlePostSubmit} title=\"Share Post\" />\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default ThreadsScreen;\r\n\r\nconst styles = StyleSheet.create({});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}