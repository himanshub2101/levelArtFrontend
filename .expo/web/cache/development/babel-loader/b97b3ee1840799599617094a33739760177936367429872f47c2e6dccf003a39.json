{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["D:/LevelUp Technology/levelArtFrontend/components/messageContainer.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n// import { View, Text, Image, ScrollView } from 'react-native';\n// import { Avatar, Divider, useColorModeValue } from 'react-native-elements'; // Import Avatar and Divider from react-native-elements\n// import Message from './message';\n// import MessageInput from './messageInput';\n// import { useRecoilValue, useSetRecoilState } from 'recoil';\n// // import { selectedConversationAtom } from '../atoms/messagesAtom';\n// // import userAtom from '../atoms/usersAtom';\n// // import { useSocket } from '../context/socket';\n\n// const MessageContainer = () => {\n//   const selectedConversation = useRecoilValue(selectedConversationAtom);\n//   const [loadingMessages, setLoadingMessages] = useState(true);\n//   const [messages, setMessages] = useState([]); // Adjust the type of messages as needed\n//   const currentUser = useRecoilValue(userAtom)[0];\n//   const { socket } = useSocket();\n//   const setConversations = useSetRecoilState(conversationsAtom);\n//   const messageEndRef = useRef(null); // Adjust the ref type as needed\n\n//   useEffect(() => {\n//     socket.on('newMessage', (message) => {\n//       if (selectedConversation._id === message.conversationId) {\n//         setMessages((prev) => [...prev, message]);\n//       }\n\n//       if (!document.hasFocus()) {\n//         const sound = new Audio(messageSound);\n//         sound.play();\n//       }\n\n//       setConversations((prev) => {\n//         const updatedConversations = prev.map((conversation) => {\n//           if (conversation._id === message.conversationId) {\n//             return {\n//               ...conversation,\n//               lastMessage: {\n//                 text: message.text,\n//                 sender: message.sender,\n//               },\n//             };\n//           }\n//           return conversation;\n//         });\n//         return updatedConversations;\n//       });\n//     });\n\n//     return () => socket.off('newMessage');\n//   }, [socket, selectedConversation, setConversations]);\n\n//   useEffect(() => {\n//     const lastMessageIsFromOtherUser = messages.length && messages[messages.length - 1].sender !== currentUser._id;\n//     if (lastMessageIsFromOtherUser) {\n//       socket.emit('markMessagesAsSeen', {\n//         conversationId: selectedConversation._id,\n//         userId: selectedConversation.userId,\n//       });\n//     }\n\n//     socket.on('messagesSeen', ({ conversationId }) => {\n//       if (selectedConversation._id === conversationId) {\n//         setMessages((prev) => {\n//           const updatedMessages = prev.map((message) => {\n//             if (!message.seen) {\n//               return {\n//                 ...message,\n//                 seen: true,\n//               };\n//             }\n//             return message;\n//           });\n//           return updatedMessages;\n//         });\n//       }\n//     });\n//   }, [socket, currentUser._id, messages, selectedConversation]);\n\n//   useEffect(() => {\n//     const getMessages = async () => {\n//       setLoadingMessages(true);\n//       setMessages([]);\n//       try {\n//         if (selectedConversation.mock) return;\n//         const res = await fetch(`/api/messages/${selectedConversation.userId}`);\n//         const data = await res.json();\n//         if (data.error) {\n//           showToast('Error', data.error);\n//           return;\n//         }\n//         setMessages(data);\n//       } catch (error) {\n//         showToast('Error', error.message);\n//       } finally {\n//         setLoadingMessages(false);\n//       }\n//     };\n\n//     getMessages();\n//   }, [selectedConversation.userId, selectedConversation.mock]);\n\n//   const bgColor = useColorModeValue('gray.200', 'gray.dark');\n\n//   return (\n//     <View style={{ flex: 1, backgroundColor: bgColor, borderRadius: 8, padding: 8 }}>\n//       {/* Message header */}\n//       <View style={{ flexDirection: 'row', alignItems: 'center', paddingVertical: 8 }}>\n//         <Avatar source={{ uri: selectedConversation.userProfilePic }} size=\"small\" />\n//         <Text>\n//           {selectedConversation.username} <Image source={require('../assets/logo.png')} style={{ width: 4, height: 4 }} />\n//         </Text>\n//       </View>\n\n//       <Divider />\n\n//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\n//         {loadingMessages ? (\n//           <View>\n//             {[...Array(5)].map((_, i) => (\n//               <View key={i} style={{ flexDirection: i % 2 === 0 ? 'row' : 'row-reverse', alignItems: 'center', padding: 4 }}>\n//                 {i % 2 === 0 && <SkeletonCircle size={7} />}\n//                 <View style={{ flexDirection: 'column', justifyContent: 'space-between' }}>\n//                   <Skeleton height={8} width={250} />\n//                   <Skeleton height={8} width={250} />\n//                   <Skeleton height={8} width={250} />\n//                 </View>\n//                 {i % 2 !== 0 && <SkeletonCircle size={7} />}\n//               </View>\n//             ))}\n//           </View>\n//         ) : (\n//           messages.map((message) => (\n//             <View key={message._id} ref={messages.length - 1 === messages.indexOf(message) ? messageEndRef : null}>\n//               <Message message={message} ownMessage={currentUser._id === message.sender} />\n//             </View>\n//           ))\n//         )}\n//       </ScrollView>\n\n//       <MessageInput setMessages={setMessages} />\n//     </View>\n//   );\n// };\n\n// export default MessageContainer;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}